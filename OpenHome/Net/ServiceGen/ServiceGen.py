#! /usr/bin/python
"""ServiceGen

Generate ohnet service providers from UPnP Service XML, This uses
a python 'template' file (passed as parameter) to define the output
file format
"""
import optparse
import os
import sys
import xmltodict


class FatalError(Exception):
    def __init__(self, aMsg):
        self.msg = aMsg

    def __str__(self):
        return 'FATAL ERROR: ' + self.msg


class Logger:
    def __init__(self):
        pass

    @staticmethod
    def Info(aMsg):
        print(aMsg)

    @staticmethod
    def Error(aMsg):
        print('ERROR: ' + aMsg)

    @staticmethod
    def Fatal(aMsg):
        # raise exception or wscript will not display logging prior to failure
        sys.tracebacklimit = 0
        raise FatalError(aMsg)


class ServiceGen:

    def __init__(self):
        self.log  = Logger()
        self.opts = None

        # User input
        self._ParseOpts()
        self._CheckOpts()
        self._LogInfo()

        # Generate output from XML+template
        with open(self.opts.xml, 'r') as f:
            xml = f.read()
        desc = xmltodict.parse( xml )
        exec 'import Templates.' + self.opts.template.strip('.py') + ' as template'
        filename, lines = template.Generate(desc['scpd'], self.opts.domain, self.opts.type, int(self.opts.version))     # NOQA
        filepath = os.path.join(self.opts.output, filename)
        with open(filepath, 'wt') as f:
            for line in lines:
                f.write(line)
                f.write('\n')
        self.log.Info('....Completed')

    #
    # Handle command line options
    #

    def _ParseOpts(self):
        """Parse the command-line options"""
        parser = optparse.OptionParser()
        parser.add_option('-t', '--template-file',    dest='template', default='',  help='Template file which defines output format')
        parser.add_option('-o', '--output-path',      dest='output',   default='',  help='Path for output file generated by this utility')
        parser.add_option('-x', '--service-xml-file', dest='xml',      default='',  help='Service XML file')
        parser.add_option('-d', '--service-domain',   dest='domain',   default='',  help='Domain of service (eg. av.openhome.org)')
        parser.add_option('-y', '--service-type',     dest='type',     default='',  help='Type of service (eg. Playlist)')
        parser.add_option('-v', '--service-versionr', dest='version',  default='',  help='Version of service (eg. 1)')
        (self.opts, args) = parser.parse_args()

    def _CheckOpts(self):
        """Check validity of options / existence of required files"""
        optsOk = True

        if not os.path.exists(os.path.join( os.path.dirname(__file__), 'Templates', self.opts.template)):
            self.log.Error('Invalid template file:- ' + self.opts.template)
            optsOk = False
        if not os.path.isdir(self.opts.output):
            try:
                os.makedirs(self.opts.output)
            except:
                self.log.Fatal('Unable to create output path:- ' + self.opts.output)
        if not os.path.exists(self.opts.xml):
            self.log.Error('Invalid Service XML file:- ' + self.opts.xml)
            optsOk = False
        if self.opts.domain == '':
            self.log.Error('Service domain MUST be defined (-d parameter)')
            optsOk = False
        if self.opts.type == '':
            self.log.Error('Service type MUST be defined (-y parameter)')
            optsOk = False
        if self.opts.version == '':
            self.log.Error('Service version MUST be defined (-v parameter)')
            optsOk = False
        else:
            try:
                int(self.opts.version)
            except:
                self.log.Error('Service version MUST be an integer')
                optsOk = False
        if not optsOk:
            self.log.Fatal('Command line option check FAILED')

    def _LogInfo(self):
        self.log.Info('Processing {0} using {1}'.format(self.opts.xml, self.opts.template))


if __name__ == '__main__':

    s = ServiceGen()
