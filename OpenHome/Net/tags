!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Action	Service.cpp	/^OpenHome::Net::Action::Action(const TChar* aName)$/;"	f	class:OpenHome::Net::Action
Action	Service.h	/^class Action$/;"	c	namespace:OpenHome::Net
Adapter	OhNet.cpp	/^NetworkAdapter* AutoNetworkAdapterRef::Adapter()$/;"	f	class:AutoNetworkAdapterRef
Adapter	OhNet.cpp	/^const NetworkAdapter* AutoNetworkAdapterRef::Adapter() const$/;"	f	class:AutoNetworkAdapterRef
AddInputParameter	Service.cpp	/^void OpenHome::Net::Action::AddInputParameter(Parameter* aParameter)$/;"	f	class:OpenHome::Net::Action
AddMsearchHandler	Discovery.cpp	/^TInt SsdpListenerMulticast::AddMsearchHandler(ISsdpMsearchHandler* aMsearchHandler)$/;"	f	class:SsdpListenerMulticast
AddNotifyHandler	Discovery.cpp	/^TInt SsdpListenerMulticast::AddNotifyHandler(ISsdpNotifyHandler* aNotifyHandler)$/;"	f	class:SsdpListenerMulticast
AddOutputParameter	Service.cpp	/^void OpenHome::Net::Action::AddOutputParameter(Parameter* aParameter)$/;"	f	class:OpenHome::Net::Action
AddRef	OhNet.cpp	/^void NetworkAdapter::AddRef(const char* aCookie)$/;"	f	class:NetworkAdapter
Address	OhNet.cpp	/^TIpAddress NetworkAdapter::Address() const$/;"	f	class:NetworkAdapter
Alive	Ssdp.cpp	/^TBool SsdpHeaderNts::Alive() const$/;"	f	class:SsdpHeaderNts
AllowedValues	Service.cpp	/^const ParameterString::Map& ParameterString::AllowedValues() const$/;"	f	class:ParameterString
AsyncBeginHandler	OhNet.cpp	/^FunctorAsync& InitialisationParams::AsyncBeginHandler()$/;"	f	class:InitialisationParams
AsyncEndHandler	OhNet.cpp	/^FunctorAsync& InitialisationParams::AsyncEndHandler()$/;"	f	class:InitialisationParams
AsyncErrorHandler	OhNet.cpp	/^FunctorAsync& InitialisationParams::AsyncErrorHandler()$/;"	f	class:InitialisationParams
AutoNetworkAdapterRef	OhNet.cpp	/^AutoNetworkAdapterRef::AutoNetworkAdapterRef(Environment& aEnv, const char* aCookie)$/;"	f	class:AutoNetworkAdapterRef
AutoNetworkAdapterRef	OhNet.cpp	/^AutoNetworkAdapterRef::AutoNetworkAdapterRef(NetworkAdapter* aAdapter, const char* aCookie)$/;"	f	class:AutoNetworkAdapterRef
AutoNetworkAdapterRef	OhNet.h	/^class DllExportClass AutoNetworkAdapterRef$/;"	c	namespace:OpenHome
Callback	FunctorAsync.h	/^    typedef TAny (*Callback)();$/;"	t	class:OpenHome::Net::FunctorAsync
CanonicalDomainToUpnp	Ssdp.cpp	/^void Ssdp::CanonicalDomainToUpnp(const Brx& aCanonicalDomain, Bwx& aUpnpDomain) \/\/ was UpnpDomain$/;"	f	class:Ssdp
Clear	Error.cpp	/^void Error::Clear()$/;"	f	class:Error
Close	OhNet.cpp	/^void UpnpLibrary::Close()$/;"	f	class:UpnpLibrary
Code	Error.h	/^    TUint Code() const { return iCode; }$/;"	f	class:OpenHome::Net::Error
Construct	Service.cpp	/^void Property::Construct(OpenHome::Net::Parameter* aParameter)$/;"	f	class:Property
ContainsAddress	OhNet.cpp	/^bool NetworkAdapter::ContainsAddress(TIpAddress aAddress) const$/;"	f	class:NetworkAdapter
CpUpnpEventServerPort	OhNet.cpp	/^uint32_t InitialisationParams::CpUpnpEventServerPort() const$/;"	f	class:InitialisationParams
Create	OhNet.cpp	/^InitialisationParams* InitialisationParams::Create()$/;"	f	class:InitialisationParams
CreateNetworkAdapterList	OhNet.cpp	/^std::vector<NetworkAdapter*>* Library::CreateNetworkAdapterList()$/;"	f	class:Library
CreateNetworkAdapterList	OhNet.cpp	/^std::vector<NetworkAdapter*>* UpnpLibrary::CreateNetworkAdapterList()$/;"	f	class:UpnpLibrary
CreateSubnetList	OhNet.cpp	/^std::vector<NetworkAdapter*>* Library::CreateSubnetList()$/;"	f	class:Library
CreateSubnetList	OhNet.cpp	/^std::vector<NetworkAdapter*>* UpnpLibrary::CreateSubnetList()$/;"	f	class:UpnpLibrary
CurrentSubnetAdapter	OhNet.cpp	/^NetworkAdapter* Library::CurrentSubnetAdapter(const char* aCookie)$/;"	f	class:Library
CurrentSubnetAdapter	OhNet.cpp	/^NetworkAdapter* UpnpLibrary::CurrentSubnetAdapter(const char* aCookie)$/;"	f	class:UpnpLibrary
DefaultAsyncHandler	OhNet.cpp	/^class OpenHome::Net::DefaultAsyncHandler : private IAsyncOutput$/;"	c	class:OpenHome::Net	file:
DefaultLogger	OhNet.cpp	/^class OpenHome::Net::DefaultLogger$/;"	c	class:OpenHome::Net	file:
Description	Error.h	/^    const TChar* Description() const { return (const TChar*)iDescription.Ptr(); }$/;"	f	class:OpenHome::Net::Error
DestroyNetworkAdapterList	OhNet.cpp	/^void Library::DestroyNetworkAdapterList(std::vector<NetworkAdapter*>* aNetworkAdapterList)$/;"	f	class:Library
DestroyNetworkAdapterList	OhNet.cpp	/^void UpnpLibrary::DestroyNetworkAdapterList(std::vector<NetworkAdapter*>* aNetworkAdapterList)$/;"	f	class:UpnpLibrary
DestroySubnetList	OhNet.cpp	/^void Library::DestroySubnetList(std::vector<NetworkAdapter*>* aSubnetList)$/;"	f	class:Library
DestroySubnetList	OhNet.cpp	/^void UpnpLibrary::DestroySubnetList(std::vector<NetworkAdapter*>* aSubnetList)$/;"	f	class:UpnpLibrary
Disable	Discovery.h	/^        void Disable() { iDead = true; }$/;"	f	class:OpenHome::Net::SsdpListenerMulticast::Handler
Domain	Service.cpp	/^const Brx& OpenHome::Net::ServiceType::Domain() const$/;"	f	class:OpenHome::Net::ServiceType
Domain	Ssdp.cpp	/^const Brx& SsdpHeaderNt::Domain() const$/;"	f	class:SsdpHeaderNt
Domain	Ssdp.cpp	/^const Brx& SsdpHeaderSt::Domain() const$/;"	f	class:SsdpHeaderSt
Domain	Ssdp.cpp	/^const Brx& SsdpHeaderUsn::Domain() const$/;"	f	class:SsdpHeaderUsn
DvIsBonjourEnabled	OhNet.cpp	/^bool InitialisationParams::DvIsBonjourEnabled() const$/;"	f	class:InitialisationParams
DvLpecServerPort	OhNet.cpp	/^uint32_t InitialisationParams::DvLpecServerPort()$/;"	f	class:InitialisationParams
DvMaxUpdateTimeSecs	OhNet.cpp	/^uint32_t InitialisationParams::DvMaxUpdateTimeSecs() const$/;"	f	class:InitialisationParams
DvNumLpecThreads	OhNet.cpp	/^uint32_t InitialisationParams::DvNumLpecThreads()$/;"	f	class:InitialisationParams
DvNumPublisherThreads	OhNet.cpp	/^uint32_t InitialisationParams::DvNumPublisherThreads() const$/;"	f	class:InitialisationParams
DvNumServerThreads	OhNet.cpp	/^uint32_t InitialisationParams::DvNumServerThreads() const$/;"	f	class:InitialisationParams
DvNumWebSocketThreads	OhNet.cpp	/^uint32_t InitialisationParams::DvNumWebSocketThreads() const$/;"	f	class:InitialisationParams
DvUpnpServerPort	OhNet.cpp	/^uint32_t InitialisationParams::DvUpnpServerPort() const$/;"	f	class:InitialisationParams
DvWebSocketPort	OhNet.cpp	/^uint32_t InitialisationParams::DvWebSocketPort() const$/;"	f	class:InitialisationParams
EAlive	Ssdp.h	/^        EAlive$/;"	e	enum:OpenHome::Net::SsdpNotifier::ENotificationType
EByeBye	Ssdp.h	/^       ,EByeBye$/;"	e	enum:OpenHome::Net::SsdpNotifier::ENotificationType
ECodeAsync	Error.h	/^    enum ECodeAsync$/;"	g	class:OpenHome::Net::Error
ECodeService	Error.h	/^    enum ECodeService$/;"	g	class:OpenHome::Net::Error
ECodeSocket	Error.h	/^    enum ECodeSocket$/;"	g	class:OpenHome::Net::Error
ELevel	Error.h	/^    enum ELevel$/;"	g	class:OpenHome::Net::Error
ELoopback	OhNet.h	/^    enum ELoopback$/;"	g	class:OpenHome::Net::InitialisationParams
ELoopbackExclude	OhNet.h	/^        ELoopbackExclude \/\/ exclude loopback from list of available subnets$/;"	e	enum:OpenHome::Net::InitialisationParams::ELoopback
ELoopbackInclude	OhNet.h	/^       ,ELoopbackInclude \/\/ include loopback in list of available subnets$/;"	e	enum:OpenHome::Net::InitialisationParams::ELoopback
ELoopbackUse	OhNet.h	/^       ,ELoopbackUse     \/\/ exclude everything but loopback from list of available subnets$/;"	e	enum:OpenHome::Net::InitialisationParams::ELoopback
ENotificationType	Ssdp.h	/^    enum ENotificationType$/;"	g	class:OpenHome::Net::SsdpNotifier
EParserState	XmlParser.h	/^    enum EParserState$/;"	g	class:OpenHome::Net::XmlParserBasic
ESsdpTarget	Ssdp.h	/^enum ESsdpTarget$/;"	g	namespace:OpenHome::Net
ETagType	XmlParser.h	/^    enum ETagType$/;"	g	class:OpenHome::Net::XmlParserBasic
EType	Service.h	/^    enum EType$/;"	g	class:OpenHome::Net::Parameter
EUpdate	Ssdp.h	/^       ,EUpdate$/;"	e	enum:OpenHome::Net::SsdpNotifier::ENotificationType
Element	XmlParser.cpp	/^Brn XmlParserBasic::Element(const Brx& aTag, const Brx& aDocument)$/;"	f	class:XmlParserBasic
Element	XmlParser.cpp	/^Brn XmlParserBasic::Element(const Brx& aTag, const Brx& aDocument, Brn& aRemaining)$/;"	f	class:XmlParserBasic
Element	XmlParser.cpp	/^Brn XmlParserBasic::Element(const TChar* aTag, const Brx& aDocument)$/;"	f	class:XmlParserBasic
Element	XmlParser.cpp	/^Brn XmlParserBasic::Element(const TChar* aTag, const Brx& aDocument, Brn& aRemaining)$/;"	f	class:XmlParserBasic
Env	OhNet.cpp	/^OpenHome::Environment& Library::Env()$/;"	f	class:Library
EraseDisabled	Discovery.cpp	/^void SsdpListenerMulticast::EraseDisabled(VectorMsearchHandler& aVector)$/;"	f	class:SsdpListenerMulticast
EraseDisabled	Discovery.cpp	/^void SsdpListenerMulticast::EraseDisabled(VectorNotifyHandler& aVector)$/;"	f	class:SsdpListenerMulticast
Error	Error.cpp	/^Error::Error()$/;"	f	class:Error
Error	Error.h	/^class Error$/;"	c	namespace:OpenHome::Net
FatalErrorHandler	OhNet.cpp	/^FunctorMsg& InitialisationParams::FatalErrorHandler()$/;"	f	class:InitialisationParams
FatalErrorHandlerDefault	OhNet.cpp	/^void InitialisationParams::FatalErrorHandlerDefault(const char* aMsg)$/;"	f	class:InitialisationParams
Find	XmlParser.cpp	/^Brn XmlParserBasic::Find(const Brx& aTag, const Brx& aDocument)$/;"	f	class:XmlParserBasic
Find	XmlParser.cpp	/^Brn XmlParserBasic::Find(const Brx& aTag, const Brx& aDocument, Brn& aRemaining)$/;"	f	class:XmlParserBasic
Find	XmlParser.cpp	/^Brn XmlParserBasic::Find(const TChar* aTag, const Brx& aDocument)$/;"	f	class:XmlParserBasic
Find	XmlParser.cpp	/^Brn XmlParserBasic::Find(const TChar* aTag, const Brx& aDocument, Brn& aRemaining)$/;"	f	class:XmlParserBasic
FindAttribute	XmlParser.cpp	/^Brn XmlParserBasic::FindAttribute(const Brx& aTag, const Brx& aAttribute, const Brx& aDocument)$/;"	f	class:XmlParserBasic
FindAttribute	XmlParser.cpp	/^Brn XmlParserBasic::FindAttribute(const TChar* aTag, const TChar* aAttribute, const Brx& aDocument)$/;"	f	class:XmlParserBasic
Flush	SsdpDv.cpp	/^void SsdpMsearchResponder::Flush()$/;"	f	class:SsdpMsearchResponder
FreeExternal	OhNet.cpp	/^OhNetCallbackFreeExternal InitialisationParams::FreeExternal() const$/;"	f	class:InitialisationParams
FullName	OhNet.cpp	/^char* NetworkAdapter::FullName() const$/;"	f	class:NetworkAdapter
FullName	Service.cpp	/^const Brx& OpenHome::Net::ServiceType::FullName() const$/;"	f	class:OpenHome::Net::ServiceType
FullNameUpnp	Service.cpp	/^const Brx& OpenHome::Net::ServiceType::FullNameUpnp() const$/;"	f	class:OpenHome::Net::ServiceType
FunctionTranslatorAsync	FunctorAsync.h	/^    FunctionTranslatorAsync(void* aPtr, OhNetFunctorAsync aCallback) :$/;"	f	class:OpenHome::Net::FunctionTranslatorAsync
FunctionTranslatorAsync	FunctorAsync.h	/^class FunctionTranslatorAsync : public FunctorAsync$/;"	c	namespace:OpenHome::Net
FunctorAsync	FunctorAsync.h	/^    FunctorAsync() : iCallback(NULL), iObject(NULL) {}$/;"	f	class:OpenHome::Net::FunctorAsync
FunctorAsync	FunctorAsync.h	/^    FunctorAsync(Thunk aT, const TAny* aObject, OhNetFunctorAsync aCallback)$/;"	f	class:OpenHome::Net::FunctorAsync
FunctorAsync	FunctorAsync.h	/^    FunctorAsync(Thunk aT, const TAny* aObject, const TAny* aCallback, TUint aBytes)$/;"	f	class:OpenHome::Net::FunctorAsync
FunctorAsync	FunctorAsync.h	/^class FunctorAsync$/;"	c	namespace:OpenHome::Net
HEADER_ERROR	Error.h	2;"	d
HEADER_IFACE_ASYNC	FunctorAsync.h	2;"	d
HEADER_SERVICE	Service.h	8;"	d
HEADER_SSDP_BASE	Ssdp.h	2;"	d
HEADER_SSDP_DISCOVERY	Discovery.h	2;"	d
HEADER_SUBSCRIPTION	Subscription.h	2;"	d
HEADER_UPNP	OhNet.h	6;"	d
HEADER_XML_PARSER	XmlParser.h	2;"	d
HOST_UDP_LOW_QUALITY_DEFAULT	OhNet.cpp	553;"	d	file:
HOST_UDP_LOW_QUALITY_DEFAULT	OhNet.cpp	555;"	d	file:
Handler	Discovery.h	/^        Handler(TInt aId) : iDead(false), iId(aId), iLock("SSDM") {}$/;"	f	class:OpenHome::Net::SsdpListenerMulticast::Handler
Handler	Discovery.h	/^        ISsdpMsearchHandler* Handler() { return iHandler; }$/;"	f	class:OpenHome::Net::SsdpListenerMulticast::MsearchHandler
Handler	Discovery.h	/^        ISsdpNotifyHandler* Handler() { return iHandler; }$/;"	f	class:OpenHome::Net::SsdpListenerMulticast::NotifyHandler
Handler	Discovery.h	/^    class Handler$/;"	c	class:OpenHome::Net::SsdpListenerMulticast
HeaderNt	Subscription.h	/^class HeaderNt : public HttpHeader$/;"	c	namespace:OpenHome::Net
HeaderSid	Subscription.h	/^class HeaderSid : public HttpHeader$/;"	c	namespace:OpenHome::Net
HeaderTimeout	Subscription.h	/^class HeaderTimeout : public HttpHeader$/;"	c	namespace:OpenHome::Net
IAsync	FunctorAsync.h	/^class IAsync$/;"	c	namespace:OpenHome::Net
IAsyncOutput	FunctorAsync.h	/^class IAsyncOutput$/;"	c	namespace:OpenHome::Net
IOutputProcessor	Service.h	/^class IOutputProcessor$/;"	c	namespace:OpenHome::Net
IPropertyWriter	Service.h	/^class IPropertyWriter$/;"	c	namespace:OpenHome::Net
ISsdpMsearchHandler	Discovery.h	/^class ISsdpMsearchHandler$/;"	c	namespace:OpenHome::Net
ISsdpNotify	Ssdp.h	/^class ISsdpNotify$/;"	c	namespace:OpenHome::Net
ISsdpNotifyHandler	Discovery.h	/^class ISsdpNotifyHandler$/;"	c	namespace:OpenHome::Net
IStackObject	OhNet.h	/^class IStackObject$/;"	c	namespace:OpenHome
Id	Discovery.h	/^        TInt Id() const { return iId; }$/;"	f	class:OpenHome::Net::SsdpListenerMulticast::Handler
InitialisationParams	OhNet.cpp	/^InitialisationParams::InitialisationParams()$/;"	f	class:InitialisationParams
InitialisationParams	OhNet.h	/^class DllExportClass InitialisationParams$/;"	c	namespace:OpenHome::Net
Initialise	OhNet.cpp	/^Environment* UpnpLibrary::Initialise(InitialisationParams* aInitParams)$/;"	f	class:UpnpLibrary
InitialiseMinimal	OhNet.cpp	/^Environment* UpnpLibrary::InitialiseMinimal(InitialisationParams* aInitParams)$/;"	f	class:UpnpLibrary
InputParameters	Service.cpp	/^const Action::VectorParameters& Action::InputParameters() const$/;"	f	class:Action
Interface	Discovery.cpp	/^TIpAddress SsdpListenerMulticast::Interface() const$/;"	f	class:SsdpListenerMulticast
IsDisabled	Discovery.h	/^        TBool IsDisabled() const { return iDead; }$/;"	f	class:OpenHome::Net::SsdpListenerMulticast::Handler
IsHostUdpLowQuality	OhNet.cpp	/^bool InitialisationParams::IsHostUdpLowQuality()$/;"	f	class:InitialisationParams
Level	Error.h	/^    ELevel Level() const { return iLevel; }$/;"	f	class:OpenHome::Net::Error
LevelName	Error.cpp	/^const TChar* Error::LevelName() const$/;"	f	class:Error
LevelName	Error.cpp	/^const TChar* Error::LevelName(ELevel aLevel)$/;"	f	class:Error
Library	OhNet.cpp	/^Library::Library(InitialisationParams* aInitParams)$/;"	f	class:Library
Library	OhNet.h	/^class DllExportClass Library$/;"	c	namespace:OpenHome::Net
ListObjectDetails	OhNet.cpp	/^void NetworkAdapter::ListObjectDetails() const$/;"	f	class:NetworkAdapter
Lock	Discovery.h	/^        void Lock() { iLock.Wait(); }$/;"	f	class:OpenHome::Net::SsdpListenerMulticast::Handler
Log	OhNet.cpp	/^void OpenHome::Net::DefaultLogger::Log(const char* aMsg)$/;"	f	class:OpenHome::Net::DefaultLogger
LogError	OhNet.cpp	/^void OpenHome::Net::DefaultAsyncHandler::LogError(IAsync& aAsync)$/;"	f	class:OpenHome::Net::DefaultAsyncHandler
LogOutput	OhNet.cpp	/^FunctorMsg& InitialisationParams::LogOutput()$/;"	f	class:InitialisationParams
LoopbackNetworkAdapter	OhNet.cpp	/^InitialisationParams::ELoopback InitialisationParams::LoopbackNetworkAdapter() const$/;"	f	class:InitialisationParams
MakeFunctorAsync	FunctorAsync.h	/^MakeFunctorAsync(Object& aC, void(CallType::* const &aF)(IAsync&))$/;"	f	namespace:OpenHome::Net
MakeFunctorAsync	FunctorAsync.h	/^MakeFunctorAsync(void* aPtr, OhNetFunctorAsync aCallback)$/;"	f	namespace:OpenHome::Net
Map	Service.h	/^    typedef std::map<Brn,Brh*,BufferCmp> Map;$/;"	t	class:OpenHome::Net::ParameterString
Mask	OhNet.cpp	/^TIpAddress NetworkAdapter::Mask() const$/;"	f	class:NetworkAdapter
MaxAge	Ssdp.cpp	/^TUint SsdpHeaderCacheControl::MaxAge() const$/;"	f	class:SsdpHeaderCacheControl
MaxValue	Service.cpp	/^TInt ParameterInt::MaxValue() const$/;"	f	class:ParameterInt
MaxValue	Service.cpp	/^TUint ParameterUint::MaxValue() const$/;"	f	class:ParameterUint
MemberFunction	FunctorAsync.h	/^    typedef TAny (FunctorAsync::*MemberFunction)();$/;"	t	class:OpenHome::Net::FunctorAsync
MemberTranslatorAsync	FunctorAsync.h	/^    MemberTranslatorAsync(Object& aC, const MemFunc& aM) :$/;"	f	class:OpenHome::Net::MemberTranslatorAsync
MemberTranslatorAsync	FunctorAsync.h	/^class MemberTranslatorAsync : public FunctorAsync$/;"	c	namespace:OpenHome::Net
MinValue	Service.cpp	/^TInt ParameterInt::MinValue() const$/;"	f	class:ParameterInt
MinValue	Service.cpp	/^TUint ParameterUint::MinValue() const$/;"	f	class:ParameterUint
Msearch	Discovery.cpp	/^void SsdpListenerMulticast::Msearch(ISsdpMsearchHandler& aMsearchHandler)$/;"	f	class:SsdpListenerMulticast
Msearch	Discovery.cpp	/^void SsdpListenerMulticast::Msearch(MsearchHandler& aHandler)$/;"	f	class:SsdpListenerMulticast
Msearch	Ssdp.cpp	/^void SsdpWriterMsearchRequest::Msearch(TUint aSeconds)$/;"	f	class:SsdpWriterMsearchRequest
MsearchAll	Discovery.cpp	/^void SsdpListenerUnicast::MsearchAll()$/;"	f	class:SsdpListenerUnicast
MsearchAll	Ssdp.cpp	/^void SsdpWriterMsearchRequest::MsearchAll(TUint aSeconds)$/;"	f	class:SsdpWriterMsearchRequest
MsearchDeviceType	Discovery.cpp	/^void SsdpListenerUnicast::MsearchDeviceType(const Brx& aDomain, const Brx& aType, TUint aVersion)$/;"	f	class:SsdpListenerUnicast
MsearchDeviceType	Ssdp.cpp	/^void SsdpWriterMsearchRequest::MsearchDeviceType(const Brx& aDomain, const Brx& aType, TUint aVersion, TUint aSeconds)$/;"	f	class:SsdpWriterMsearchRequest
MsearchDurationSeconds	Discovery.cpp	/^TUint SsdpListenerUnicast::MsearchDurationSeconds() const$/;"	f	class:SsdpListenerUnicast
MsearchHandler	Discovery.h	/^        MsearchHandler(ISsdpMsearchHandler* aHandler, TInt aId) : SsdpListenerMulticast::Handler(aId), iHandler(aHandler) {}$/;"	f	class:OpenHome::Net::SsdpListenerMulticast::MsearchHandler
MsearchHandler	Discovery.h	/^    class MsearchHandler : public Handler$/;"	c	class:OpenHome::Net::SsdpListenerMulticast
MsearchRoot	Discovery.cpp	/^void SsdpListenerUnicast::MsearchRoot()$/;"	f	class:SsdpListenerUnicast
MsearchRoot	Ssdp.cpp	/^void SsdpWriterMsearchRequest::MsearchRoot(TUint aSeconds)$/;"	f	class:SsdpWriterMsearchRequest
MsearchServiceType	Discovery.cpp	/^void SsdpListenerUnicast::MsearchServiceType(const Brx& aDomain, const Brx& aType, TUint aVersion)$/;"	f	class:SsdpListenerUnicast
MsearchServiceType	Ssdp.cpp	/^void SsdpWriterMsearchRequest::MsearchServiceType(const Brx& aDomain, const Brx& aType, TUint aVersion, TUint aSeconds)$/;"	f	class:SsdpWriterMsearchRequest
MsearchTimeSecs	OhNet.cpp	/^uint32_t InitialisationParams::MsearchTimeSecs() const$/;"	f	class:InitialisationParams
MsearchTtl	OhNet.cpp	/^uint32_t InitialisationParams::MsearchTtl() const$/;"	f	class:InitialisationParams
MsearchUuid	Discovery.cpp	/^void SsdpListenerUnicast::MsearchUuid(const Brx& aUuid)$/;"	f	class:SsdpListenerUnicast
MsearchUuid	Ssdp.cpp	/^void SsdpWriterMsearchRequest::MsearchUuid(const Brx& aUuid, TUint aSeconds)$/;"	f	class:SsdpWriterMsearchRequest
Mutex	Discovery.h	/^        OpenHome::Mutex& Mutex() { return iLock; }$/;"	f	class:OpenHome::Net::SsdpListenerMulticast::Handler
Mx	Ssdp.cpp	/^TUint SsdpHeaderMx::Mx() const$/;"	f	class:SsdpHeaderMx
Name	OhNet.cpp	/^const char* NetworkAdapter::Name() const$/;"	f	class:NetworkAdapter
Name	Service.cpp	/^const Brx& OpenHome::Net::Action::Name() const$/;"	f	class:OpenHome::Net::Action
Name	Service.cpp	/^const Brx& OpenHome::Net::Parameter::Name() const$/;"	f	class:OpenHome::Net::Parameter
Name	Service.cpp	/^const Brx& OpenHome::Net::ServiceType::Name() const$/;"	f	class:OpenHome::Net::ServiceType
Net	Discovery.h	/^namespace Net {$/;"	n	namespace:OpenHome
Net	Error.h	/^namespace Net {$/;"	n	namespace:OpenHome
Net	FunctorAsync.h	/^namespace Net {$/;"	n	namespace:OpenHome
Net	Globals.h	/^namespace Net {$/;"	n	namespace:OpenHome
Net	OhNet.h	/^namespace Net {$/;"	n	namespace:OpenHome
Net	Service.h	/^namespace Net {$/;"	n	namespace:OpenHome
Net	Ssdp.h	/^namespace Net {$/;"	n	namespace:OpenHome
Net	Subscription.h	/^namespace Net {$/;"	n	namespace:OpenHome
Net	XmlParser.h	/^namespace Net {$/;"	n	namespace:OpenHome
NetworkAdapter	OhNet.cpp	/^NetworkAdapter::NetworkAdapter(Environment& aEnv, TIpAddress aAddress, TIpAddress aNetMask, const char* aName, const char* aCookie)$/;"	f	class:NetworkAdapter
NetworkAdapter	OhNet.h	/^class DllExportClass NetworkAdapter : private IStackObject$/;"	c	namespace:OpenHome
NetworkAdapterChangedListener	OhNet.cpp	/^FunctorNetworkAdapter& InitialisationParams::NetworkAdapterChangedListener()$/;"	f	class:InitialisationParams
NextTag	XmlParser.cpp	/^void XmlParserBasic::NextTag(const Brx& aDocument, Brn& aName, Brn& aAttributes, Brn& aNamespace, TUint& aIndex, Brn& aRemaining, ETagType& aType)$/;"	f	class:XmlParserBasic
Notify	Discovery.cpp	/^void SsdpListenerMulticast::Notify(ISsdpNotifyHandler& aNotifyHandler)$/;"	f	class:SsdpListenerMulticast
Notify	Discovery.cpp	/^void SsdpListenerMulticast::Notify(NotifyHandler& aHandler)$/;"	f	class:SsdpListenerMulticast
NotifyHandler	Discovery.h	/^        NotifyHandler(ISsdpNotifyHandler* aHandler, TInt aId) : SsdpListenerMulticast::Handler(aId), iHandler(aHandler) {}$/;"	f	class:OpenHome::Net::SsdpListenerMulticast::NotifyHandler
NotifyHandler	Discovery.h	/^    class NotifyHandler : public Handler$/;"	c	class:OpenHome::Net::SsdpListenerMulticast
NotifyResumed	Discovery.cpp	/^void SsdpListenerMulticast::NotifyResumed()$/;"	f	class:SsdpListenerMulticast
NotifyResumed	Discovery.cpp	/^void SsdpListenerUnicast::NotifyResumed()$/;"	f	class:SsdpListenerUnicast
NotifyResumed	OhNet.cpp	/^void Library::NotifyResumed()$/;"	f	class:Library
NotifyResumed	OhNet.cpp	/^void UpnpLibrary::NotifyResumed()$/;"	f	class:UpnpLibrary
NotifySuspended	OhNet.cpp	/^void Library::NotifySuspended()$/;"	f	class:Library
NotifySuspended	OhNet.cpp	/^void UpnpLibrary::NotifySuspended()$/;"	f	class:UpnpLibrary
NumActionInvokerThreads	OhNet.cpp	/^uint32_t InitialisationParams::NumActionInvokerThreads() const$/;"	f	class:InitialisationParams
NumEventSessionThreads	OhNet.cpp	/^uint32_t InitialisationParams::NumEventSessionThreads() const$/;"	f	class:InitialisationParams
NumInvocations	OhNet.cpp	/^uint32_t InitialisationParams::NumInvocations() const$/;"	f	class:InitialisationParams
NumSubscriberThreads	OhNet.cpp	/^uint32_t InitialisationParams::NumSubscriberThreads() const$/;"	f	class:InitialisationParams
NumXmlFetcherThreads	OhNet.cpp	/^uint32_t InitialisationParams::NumXmlFetcherThreads() const$/;"	f	class:InitialisationParams
OHNET_GLOBALS	Globals.h	2;"	d
OhNetFunctorAsync	FunctorAsync.h	/^typedef void (STDCALL *OhNetFunctorAsync)(void* aPtr, IAsync* aAsync);$/;"	t	namespace:OpenHome::Net
OpenHome	Discovery.h	/^namespace OpenHome {$/;"	n
OpenHome	Error.h	/^namespace OpenHome {$/;"	n
OpenHome	FunctorAsync.h	/^namespace OpenHome {$/;"	n
OpenHome	Globals.h	/^namespace OpenHome {$/;"	n
OpenHome	OhNet.h	/^namespace OpenHome {$/;"	n
OpenHome	Service.h	/^namespace OpenHome {$/;"	n
OpenHome	Ssdp.h	/^namespace OpenHome {$/;"	n
OpenHome	Subscription.h	/^namespace OpenHome {$/;"	n
OpenHome	XmlParser.h	/^namespace OpenHome {$/;"	n
Output	Error.cpp	/^void Error::Output(IAsyncOutput& aConsole)$/;"	f	class:Error
Output	OhNet.cpp	/^void OpenHome::Net::DefaultAsyncHandler::Output(const TChar* aKey, const TChar* aValue)$/;"	f	class:OpenHome::Net::DefaultAsyncHandler
OutputParameters	Service.cpp	/^const Action::VectorParameters& Action::OutputParameters() const$/;"	f	class:Action
Parameter	Service.cpp	/^OpenHome::Net::Parameter::Parameter(const TChar* aName, EType aType)$/;"	f	class:OpenHome::Net::Parameter
Parameter	Service.cpp	/^const OpenHome::Net::Parameter& Property::Parameter() const$/;"	f	class:Property
Parameter	Service.h	/^class Parameter$/;"	c	namespace:OpenHome::Net
ParameterBinary	Service.cpp	/^ParameterBinary::ParameterBinary(const TChar* aName)$/;"	f	class:ParameterBinary
ParameterBinary	Service.h	/^class ParameterBinary : public Parameter$/;"	c	namespace:OpenHome::Net
ParameterBool	Service.cpp	/^ParameterBool::ParameterBool(const TChar* aName)$/;"	f	class:ParameterBool
ParameterBool	Service.h	/^class ParameterBool : public Parameter$/;"	c	namespace:OpenHome::Net
ParameterInt	Service.cpp	/^ParameterInt::ParameterInt(const TChar* aName, TInt aMinValue, TInt aMaxValue, TInt aStep)$/;"	f	class:ParameterInt
ParameterInt	Service.h	/^class ParameterInt : public Parameter$/;"	c	namespace:OpenHome::Net
ParameterRelated	Service.cpp	/^ParameterRelated::ParameterRelated(const TChar* aName, const Property& aRelated)$/;"	f	class:ParameterRelated
ParameterRelated	Service.h	/^class ParameterRelated : public Parameter$/;"	c	namespace:OpenHome::Net
ParameterString	Service.cpp	/^ParameterString::ParameterString(const TChar* aName)$/;"	f	class:ParameterString
ParameterString	Service.cpp	/^ParameterString::ParameterString(const TChar* aName, TChar** aAllowedValues, TUint aCount)$/;"	f	class:ParameterString
ParameterString	Service.h	/^class ParameterString : public Parameter$/;"	c	namespace:OpenHome::Net
ParameterUint	Service.cpp	/^ParameterUint::ParameterUint(const TChar* aName, TUint aMinValue, TUint aMaxValue, TUint aStep)$/;"	f	class:ParameterUint
ParameterUint	Service.h	/^class ParameterUint : public Parameter$/;"	c	namespace:OpenHome::Net
ParseUrn	Ssdp.cpp	/^TBool Ssdp::ParseUrn(const Brx& aUrn, const Brx& aType, Brn& aDomainName, Brn& aDeviceType, TUint& aVer)$/;"	f	class:Ssdp
ParseUrnDevice	Ssdp.cpp	/^TBool Ssdp::ParseUrnDevice(const Brx& aUrn, Brn& aDomainName, Brn& aDeviceType, TUint& aVer)$/;"	f	class:Ssdp
ParseUrnService	Ssdp.cpp	/^TBool Ssdp::ParseUrnService(const Brx& aUrn, Brn& aDomainName, Brn& aDeviceType, TUint& aVer)$/;"	f	class:Ssdp
PathUpnp	Service.cpp	/^const Brx& OpenHome::Net::ServiceType::PathUpnp() const$/;"	f	class:OpenHome::Net::ServiceType
PendingSubscriptionTimeoutMs	OhNet.cpp	/^uint32_t InitialisationParams::PendingSubscriptionTimeoutMs() const$/;"	f	class:InitialisationParams
Process	Service.cpp	/^void PropertyBinary::Process(IOutputProcessor& aProcessor, const Brx& aBuffer)$/;"	f	class:PropertyBinary
Process	Service.cpp	/^void PropertyBool::Process(IOutputProcessor& aProcessor, const Brx& aBuffer)$/;"	f	class:PropertyBool
Process	Service.cpp	/^void PropertyInt::Process(IOutputProcessor& aProcessor, const Brx& aBuffer)$/;"	f	class:PropertyInt
Process	Service.cpp	/^void PropertyString::Process(IOutputProcessor& aProcessor, const Brx& aBuffer)$/;"	f	class:PropertyString
Process	Service.cpp	/^void PropertyUint::Process(IOutputProcessor& aProcessor, const Brx& aBuffer)$/;"	f	class:PropertyUint
Process	Ssdp.cpp	/^void SsdpHeaderCacheControl::Process(const Brx& aValue)$/;"	f	class:SsdpHeaderCacheControl
Process	Ssdp.cpp	/^void SsdpHeaderExt::Process(const Brx& aValue)$/;"	f	class:SsdpHeaderExt
Process	Ssdp.cpp	/^void SsdpHeaderHost::Process(const Brx& aValue)$/;"	f	class:SsdpHeaderHost
Process	Ssdp.cpp	/^void SsdpHeaderMan::Process(const Brx& aValue)$/;"	f	class:SsdpHeaderMan
Process	Ssdp.cpp	/^void SsdpHeaderMx::Process(const Brx& aValue)$/;"	f	class:SsdpHeaderMx
Process	Ssdp.cpp	/^void SsdpHeaderNt::Process(const Brx& aValue)$/;"	f	class:SsdpHeaderNt
Process	Ssdp.cpp	/^void SsdpHeaderNts::Process(const Brx& aValue)$/;"	f	class:SsdpHeaderNts
Process	Ssdp.cpp	/^void SsdpHeaderServer::Process(const Brx& \/*aValue*\/)$/;"	f	class:SsdpHeaderServer
Process	Ssdp.cpp	/^void SsdpHeaderSt::Process(const Brx& aValue)$/;"	f	class:SsdpHeaderSt
Process	Ssdp.cpp	/^void SsdpHeaderUsn::Process(const Brx& aValue)$/;"	f	class:SsdpHeaderUsn
Process	Subscription.cpp	/^void HeaderNt::Process(const Brx& aValue)$/;"	f	class:HeaderNt
Process	Subscription.cpp	/^void HeaderSid::Process(const Brx& aValue)$/;"	f	class:HeaderSid
Process	Subscription.cpp	/^void HeaderTimeout::Process(const Brx& aValue)$/;"	f	class:HeaderTimeout
Property	Service.cpp	/^Property::Property(OpenHome::Net::Parameter* aParameter)$/;"	f	class:Property
Property	Service.cpp	/^Property::Property(OpenHome::Net::Parameter* aParameter, Functor& aFunctor)$/;"	f	class:Property
Property	Service.h	/^class Property$/;"	c	namespace:OpenHome::Net
PropertyBinary	Service.cpp	/^PropertyBinary::PropertyBinary(OpenHome::Net::Parameter* aParameter)$/;"	f	class:PropertyBinary
PropertyBinary	Service.cpp	/^PropertyBinary::PropertyBinary(const TChar* aName, Functor& aFunctor)$/;"	f	class:PropertyBinary
PropertyBinary	Service.h	/^class PropertyBinary : public Property$/;"	c	namespace:OpenHome::Net
PropertyBool	Service.cpp	/^PropertyBool::PropertyBool(OpenHome::Net::Parameter* aParameter)$/;"	f	class:PropertyBool
PropertyBool	Service.cpp	/^PropertyBool::PropertyBool(const TChar* aName, Functor& aFunctor)$/;"	f	class:PropertyBool
PropertyBool	Service.h	/^class PropertyBool : public Property$/;"	c	namespace:OpenHome::Net
PropertyInt	Service.cpp	/^PropertyInt::PropertyInt(OpenHome::Net::Parameter* aParameter)$/;"	f	class:PropertyInt
PropertyInt	Service.cpp	/^PropertyInt::PropertyInt(const TChar* aName, Functor& aFunctor)$/;"	f	class:PropertyInt
PropertyInt	Service.h	/^class PropertyInt : public Property$/;"	c	namespace:OpenHome::Net
PropertyString	Service.cpp	/^PropertyString::PropertyString(OpenHome::Net::Parameter* aParameter)$/;"	f	class:PropertyString
PropertyString	Service.cpp	/^PropertyString::PropertyString(const TChar* aName, Functor& aFunctor)$/;"	f	class:PropertyString
PropertyString	Service.h	/^class PropertyString : public Property$/;"	c	namespace:OpenHome::Net
PropertyUint	Service.cpp	/^PropertyUint::PropertyUint(OpenHome::Net::Parameter* aParameter)$/;"	f	class:PropertyUint
PropertyUint	Service.cpp	/^PropertyUint::PropertyUint(const TChar* aName, Functor& aFunctor)$/;"	f	class:PropertyUint
PropertyUint	Service.h	/^class PropertyUint : public Property$/;"	c	namespace:OpenHome::Net
Read	Discovery.cpp	/^void SsdpSocketReader::Read(Bwx& aBuffer)$/;"	f	class:SsdpSocketReader
ReadFlush	Discovery.cpp	/^void SsdpSocketReader::ReadFlush()$/;"	f	class:SsdpSocketReader
ReadInterrupt	Discovery.cpp	/^void SsdpSocketReader::ReadInterrupt()$/;"	f	class:SsdpSocketReader
Recognise	Ssdp.cpp	/^TBool SsdpHeaderCacheControl::Recognise(const Brx& aHeader)$/;"	f	class:SsdpHeaderCacheControl
Recognise	Ssdp.cpp	/^TBool SsdpHeaderExt::Recognise(const Brx& aHeader)$/;"	f	class:SsdpHeaderExt
Recognise	Ssdp.cpp	/^TBool SsdpHeaderHost::Recognise(const Brx& aHeader)$/;"	f	class:SsdpHeaderHost
Recognise	Ssdp.cpp	/^TBool SsdpHeaderMan::Recognise(const Brx& aHeader)$/;"	f	class:SsdpHeaderMan
Recognise	Ssdp.cpp	/^TBool SsdpHeaderMx::Recognise(const Brx& aHeader)$/;"	f	class:SsdpHeaderMx
Recognise	Ssdp.cpp	/^TBool SsdpHeaderNt::Recognise(const Brx& aHeader)$/;"	f	class:SsdpHeaderNt
Recognise	Ssdp.cpp	/^TBool SsdpHeaderNts::Recognise(const Brx& aHeader)$/;"	f	class:SsdpHeaderNts
Recognise	Ssdp.cpp	/^TBool SsdpHeaderServer::Recognise(const Brx& aHeader)$/;"	f	class:SsdpHeaderServer
Recognise	Ssdp.cpp	/^TBool SsdpHeaderSt::Recognise(const Brx& aHeader)$/;"	f	class:SsdpHeaderSt
Recognise	Ssdp.cpp	/^TBool SsdpHeaderUsn::Recognise(const Brx& aHeader)$/;"	f	class:SsdpHeaderUsn
Recognise	Subscription.cpp	/^TBool HeaderNt::Recognise(const Brx& aHeader)$/;"	f	class:HeaderNt
Recognise	Subscription.cpp	/^TBool HeaderSid::Recognise(const Brx& aHeader)$/;"	f	class:HeaderSid
Recognise	Subscription.cpp	/^TBool HeaderTimeout::Recognise(const Brx& aHeader)$/;"	f	class:HeaderTimeout
Related	Service.cpp	/^const Property& ParameterRelated::Related() const$/;"	f	class:ParameterRelated
RemoveMsearchHandler	Discovery.cpp	/^void SsdpListenerMulticast::RemoveMsearchHandler(TInt aHandlerId)$/;"	f	class:SsdpListenerMulticast
RemoveNotifyHandler	Discovery.cpp	/^void SsdpListenerMulticast::RemoveNotifyHandler(TInt aHandlerId)$/;"	f	class:SsdpListenerMulticast
RemoveRef	OhNet.cpp	/^void NetworkAdapter::RemoveRef(const char* aCookie)$/;"	f	class:NetworkAdapter
ReportChanged	Service.cpp	/^TBool Property::ReportChanged()$/;"	f	class:Property
ResetSequenceNumber	Service.cpp	/^void Property::ResetSequenceNumber()$/;"	f	class:Property
Run	Discovery.cpp	/^void SsdpListenerMulticast::Run()$/;"	f	class:SsdpListenerMulticast
Run	Discovery.cpp	/^void SsdpListenerUnicast::Run()$/;"	f	class:SsdpListenerUnicast
Sender	Discovery.cpp	/^Endpoint SsdpSocketReader::Sender() const$/;"	f	class:SsdpSocketReader
SequenceNumber	Service.cpp	/^TUint Property::SequenceNumber() const$/;"	f	class:Property
Service	Service.cpp	/^Service::Service(Environment& aEnv, const TChar* aDomain, const TChar* aName, TUint aVersion)$/;"	f	class:Service
Service	Service.h	/^class Service$/;"	c	namespace:OpenHome::Net
ServiceId	Service.cpp	/^const Brx& OpenHome::Net::ServiceType::ServiceId() const$/;"	f	class:OpenHome::Net::ServiceType
ServiceType	Service.cpp	/^OpenHome::Net::ServiceType::ServiceType(Environment& aEnv, const TChar* aDomain, const TChar* aName, TUint aVersion)$/;"	f	class:OpenHome::Net::ServiceType
ServiceType	Service.cpp	/^OpenHome::Net::ServiceType::ServiceType(const ServiceType& aServiceType)$/;"	f	class:OpenHome::Net::ServiceType
ServiceType	Service.cpp	/^const OpenHome::Net::ServiceType& Service::ServiceType() const$/;"	f	class:Service
ServiceType	Service.h	/^class ServiceType$/;"	c	namespace:OpenHome::Net
Set	Error.cpp	/^void Error::Set(ELevel aLevel, TUint aCode, const Brx& aDescription)$/;"	f	class:Error
SetAsyncBeginHandler	OhNet.cpp	/^void InitialisationParams::SetAsyncBeginHandler(FunctorAsync aHandler)$/;"	f	class:InitialisationParams
SetAsyncEndHandler	OhNet.cpp	/^void InitialisationParams::SetAsyncEndHandler(FunctorAsync aHandler)$/;"	f	class:InitialisationParams
SetAsyncErrorHandler	OhNet.cpp	/^void InitialisationParams::SetAsyncErrorHandler(FunctorAsync aHandler)$/;"	f	class:InitialisationParams
SetCpUpnpEventServerPort	OhNet.cpp	/^void InitialisationParams::SetCpUpnpEventServerPort(TUint aPort)$/;"	f	class:InitialisationParams
SetCurrentSubnet	OhNet.cpp	/^void Library::SetCurrentSubnet(TIpAddress aSubnet)$/;"	f	class:Library
SetCurrentSubnet	OhNet.cpp	/^void UpnpLibrary::SetCurrentSubnet(TIpAddress aSubnet)$/;"	f	class:UpnpLibrary
SetDvEnableBonjour	OhNet.cpp	/^void InitialisationParams::SetDvEnableBonjour()$/;"	f	class:InitialisationParams
SetDvLpecServerPort	OhNet.cpp	/^void InitialisationParams::SetDvLpecServerPort(uint32_t aPort)$/;"	f	class:InitialisationParams
SetDvMaxUpdateTime	OhNet.cpp	/^void InitialisationParams::SetDvMaxUpdateTime(uint32_t aSecs)$/;"	f	class:InitialisationParams
SetDvNumLpecThreads	OhNet.cpp	/^void InitialisationParams::SetDvNumLpecThreads(uint32_t aNumThreads)$/;"	f	class:InitialisationParams
SetDvNumPublisherThreads	OhNet.cpp	/^void InitialisationParams::SetDvNumPublisherThreads(uint32_t aNumThreads)$/;"	f	class:InitialisationParams
SetDvNumServerThreads	OhNet.cpp	/^void InitialisationParams::SetDvNumServerThreads(uint32_t aNumThreads)$/;"	f	class:InitialisationParams
SetDvNumWebSocketThreads	OhNet.cpp	/^void InitialisationParams::SetDvNumWebSocketThreads(uint32_t aNumThreads)$/;"	f	class:InitialisationParams
SetDvUpnpServerPort	OhNet.cpp	/^void InitialisationParams::SetDvUpnpServerPort(TUint aPort)$/;"	f	class:InitialisationParams
SetDvWebSocketPort	OhNet.cpp	/^void InitialisationParams::SetDvWebSocketPort(TUint aPort)$/;"	f	class:InitialisationParams
SetFatalErrorHandler	OhNet.cpp	/^void InitialisationParams::SetFatalErrorHandler(FunctorMsg aFunctor)$/;"	f	class:InitialisationParams
SetFreeExternalCallback	OhNet.cpp	/^void InitialisationParams::SetFreeExternalCallback(OhNetCallbackFreeExternal aCallback)$/;"	f	class:InitialisationParams
SetHostUdpIsLowQuality	OhNet.cpp	/^void InitialisationParams::SetHostUdpIsLowQuality(TBool aLow)$/;"	f	class:InitialisationParams
SetIncludeLoopbackNetworkAdapter	OhNet.cpp	/^void InitialisationParams::SetIncludeLoopbackNetworkAdapter()$/;"	f	class:InitialisationParams
SetLogOutput	OhNet.cpp	/^void InitialisationParams::SetLogOutput(FunctorMsg aLogOutput)$/;"	f	class:InitialisationParams
SetMsearchTime	OhNet.cpp	/^void InitialisationParams::SetMsearchTime(uint32_t aSecs)$/;"	f	class:InitialisationParams
SetMsearchTtl	OhNet.cpp	/^void InitialisationParams::SetMsearchTtl(uint32_t aTtl)$/;"	f	class:InitialisationParams
SetNetworkAdapterChangedListener	OhNet.cpp	/^void InitialisationParams::SetNetworkAdapterChangedListener(FunctorNetworkAdapter aFunctor)$/;"	f	class:InitialisationParams
SetNumActionInvokerThreads	OhNet.cpp	/^void InitialisationParams::SetNumActionInvokerThreads(uint32_t aNumThreads)$/;"	f	class:InitialisationParams
SetNumEventSessionThreads	OhNet.cpp	/^void InitialisationParams::SetNumEventSessionThreads(uint32_t aNumThreads)$/;"	f	class:InitialisationParams
SetNumInvocations	OhNet.cpp	/^void InitialisationParams::SetNumInvocations(uint32_t aNumInvocations)$/;"	f	class:InitialisationParams
SetNumSubscriberThreads	OhNet.cpp	/^void InitialisationParams::SetNumSubscriberThreads(uint32_t aNumThreads)$/;"	f	class:InitialisationParams
SetNumXmlFetcherThreads	OhNet.cpp	/^void InitialisationParams::SetNumXmlFetcherThreads(uint32_t aNumThreads)$/;"	f	class:InitialisationParams
SetPendingSubscriptionTimeout	OhNet.cpp	/^void InitialisationParams::SetPendingSubscriptionTimeout(uint32_t aTimeoutMs)$/;"	f	class:InitialisationParams
SetRemote	SsdpDv.cpp	/^void SsdpMsearchResponder::SetRemote(const Endpoint& aEndpoint, TUint aConfigId, TIpAddress aAdapter)$/;"	f	class:SsdpMsearchResponder
SetSubnetAddedListener	OhNet.cpp	/^void InitialisationParams::SetSubnetAddedListener(FunctorNetworkAdapter aFunctor)$/;"	f	class:InitialisationParams
SetSubnetListChangedListener	OhNet.cpp	/^void InitialisationParams::SetSubnetListChangedListener(Functor aFunctor)$/;"	f	class:InitialisationParams
SetSubnetRemovedListener	OhNet.cpp	/^void InitialisationParams::SetSubnetRemovedListener(FunctorNetworkAdapter aFunctor)$/;"	f	class:InitialisationParams
SetSubscriptionDuration	OhNet.cpp	/^void InitialisationParams::SetSubscriptionDuration(uint32_t aDurationSecs)$/;"	f	class:InitialisationParams
SetTcpConnectTimeout	OhNet.cpp	/^void InitialisationParams::SetTcpConnectTimeout(uint32_t aTimeoutMs)$/;"	f	class:InitialisationParams
SetThreadExitHandler	OhNet.cpp	/^void InitialisationParams::SetThreadExitHandler(Functor aFunctor)$/;"	f	class:InitialisationParams
SetUseLoopbackNetworkAdapter	OhNet.cpp	/^void InitialisationParams::SetUseLoopbackNetworkAdapter()$/;"	f	class:InitialisationParams
SetValue	Service.cpp	/^TBool PropertyBinary::SetValue(const Brx& aValue)$/;"	f	class:PropertyBinary
SetValue	Service.cpp	/^TBool PropertyBool::SetValue(TBool aValue)$/;"	f	class:PropertyBool
SetValue	Service.cpp	/^TBool PropertyInt::SetValue(TInt aValue)$/;"	f	class:PropertyInt
SetValue	Service.cpp	/^TBool PropertyString::SetValue(const Brx& aValue)$/;"	f	class:PropertyString
SetValue	Service.cpp	/^TBool PropertyUint::SetValue(TUint aValue)$/;"	f	class:PropertyUint
Sid	Subscription.cpp	/^Brh& HeaderSid::Sid()$/;"	f	class:HeaderSid
Ssdp	Ssdp.h	/^class Ssdp$/;"	c	namespace:OpenHome::Net
SsdpHeaderCacheControl	Ssdp.h	/^class SsdpHeaderCacheControl : public HttpHeader$/;"	c	namespace:OpenHome::Net
SsdpHeaderExt	Ssdp.h	/^class SsdpHeaderExt : public HttpHeader$/;"	c	namespace:OpenHome::Net
SsdpHeaderHost	Ssdp.h	/^class SsdpHeaderHost : public HttpHeader$/;"	c	namespace:OpenHome::Net
SsdpHeaderMan	Ssdp.h	/^class SsdpHeaderMan : public HttpHeader$/;"	c	namespace:OpenHome::Net
SsdpHeaderMx	Ssdp.h	/^class SsdpHeaderMx : public HttpHeader$/;"	c	namespace:OpenHome::Net
SsdpHeaderNt	Ssdp.h	/^class SsdpHeaderNt : public HttpHeader$/;"	c	namespace:OpenHome::Net
SsdpHeaderNts	Ssdp.h	/^class SsdpHeaderNts : public HttpHeader$/;"	c	namespace:OpenHome::Net
SsdpHeaderServer	Ssdp.h	/^class SsdpHeaderServer : public HttpHeader$/;"	c	namespace:OpenHome::Net
SsdpHeaderSt	Ssdp.h	/^class SsdpHeaderSt : public HttpHeader$/;"	c	namespace:OpenHome::Net
SsdpHeaderUsn	Ssdp.h	/^class SsdpHeaderUsn : public HttpHeader$/;"	c	namespace:OpenHome::Net
SsdpListener	Discovery.cpp	/^SsdpListener::SsdpListener(const TChar* aName)$/;"	f	class:SsdpListener
SsdpListener	Discovery.h	/^class SsdpListener : public Thread$/;"	c	namespace:OpenHome::Net
SsdpListenerMulticast	Discovery.cpp	/^SsdpListenerMulticast::SsdpListenerMulticast(Environment& aEnv, TIpAddress aInterface)$/;"	f	class:SsdpListenerMulticast
SsdpListenerMulticast	Discovery.h	/^class SsdpListenerMulticast : public SsdpListener, private IResumeObserver$/;"	c	namespace:OpenHome::Net
SsdpListenerUnicast	Discovery.cpp	/^SsdpListenerUnicast::SsdpListenerUnicast(Environment& aEnv, ISsdpNotifyHandler& aNotifyHandler, TIpAddress aInterface)$/;"	f	class:SsdpListenerUnicast
SsdpListenerUnicast	Discovery.h	/^class SsdpListenerUnicast : public SsdpListener, private IResumeObserver$/;"	c	namespace:OpenHome::Net
SsdpMsearchResponder	Ssdp.h	/^class SsdpMsearchResponder : public ISsdpNotify$/;"	c	namespace:OpenHome::Net
SsdpMsearchResponder	SsdpDv.cpp	/^SsdpMsearchResponder::SsdpMsearchResponder(DvStack& aDvStack)$/;"	f	class:SsdpMsearchResponder
SsdpNotifier	Ssdp.h	/^class SsdpNotifier$/;"	c	namespace:OpenHome::Net
SsdpNotifier	SsdpDv.cpp	/^SsdpNotifier::SsdpNotifier(DvStack& aDvStack)$/;"	f	class:SsdpNotifier
SsdpNotifierAlive	Ssdp.h	/^class SsdpNotifierAlive : public ISsdpNotify, public INonCopyable$/;"	c	namespace:OpenHome::Net
SsdpNotifierAlive	SsdpDv.cpp	/^SsdpNotifierAlive::SsdpNotifierAlive(SsdpNotifier& aNotifier)$/;"	f	class:SsdpNotifierAlive
SsdpNotifierByeBye	Ssdp.h	/^class SsdpNotifierByeBye : public ISsdpNotify, public INonCopyable$/;"	c	namespace:OpenHome::Net
SsdpNotifierByeBye	SsdpDv.cpp	/^SsdpNotifierByeBye::SsdpNotifierByeBye(SsdpNotifier& aNotifier)$/;"	f	class:SsdpNotifierByeBye
SsdpNotifierUpdate	Ssdp.h	/^class SsdpNotifierUpdate : public ISsdpNotify, public INonCopyable$/;"	c	namespace:OpenHome::Net
SsdpNotifierUpdate	SsdpDv.cpp	/^SsdpNotifierUpdate::SsdpNotifierUpdate(SsdpNotifier& aNotifier)$/;"	f	class:SsdpNotifierUpdate
SsdpNotify	SsdpDv.cpp	/^void SsdpMsearchResponder::SsdpNotify(const Brx& aUri)$/;"	f	class:SsdpMsearchResponder
SsdpNotify	SsdpDv.cpp	/^void SsdpNotifier::SsdpNotify(const Brx& aUri, ENotificationType aNotificationType)$/;"	f	class:SsdpNotifier
SsdpNotifyDeviceType	SsdpDv.cpp	/^void SsdpMsearchResponder::SsdpNotifyDeviceType(const Brx& aDomain, const Brx& aType, TUint aVersion, const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpMsearchResponder
SsdpNotifyDeviceType	SsdpDv.cpp	/^void SsdpNotifier::SsdpNotifyDeviceType(const Brx& aDomain, const Brx& aType, TUint aVersion, const Brx& aUuid, const Brx& aUri, ENotificationType aNotificationType)$/;"	f	class:SsdpNotifier
SsdpNotifyDeviceType	SsdpDv.cpp	/^void SsdpNotifierAlive::SsdpNotifyDeviceType(const Brx& aDomain, const Brx& aType, TUint aVersion, const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpNotifierAlive
SsdpNotifyDeviceType	SsdpDv.cpp	/^void SsdpNotifierByeBye::SsdpNotifyDeviceType(const Brx& aDomain, const Brx& aType, TUint aVersion, const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpNotifierByeBye
SsdpNotifyDeviceType	SsdpDv.cpp	/^void SsdpNotifierUpdate::SsdpNotifyDeviceType(const Brx& aDomain, const Brx& aType, TUint aVersion, const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpNotifierUpdate
SsdpNotifyRoot	SsdpDv.cpp	/^void SsdpMsearchResponder::SsdpNotifyRoot(const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpMsearchResponder
SsdpNotifyRoot	SsdpDv.cpp	/^void SsdpNotifier::SsdpNotifyRoot(const Brx& aUuid, const Brx& aUri, ENotificationType aNotificationType)$/;"	f	class:SsdpNotifier
SsdpNotifyRoot	SsdpDv.cpp	/^void SsdpNotifierAlive::SsdpNotifyRoot(const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpNotifierAlive
SsdpNotifyRoot	SsdpDv.cpp	/^void SsdpNotifierByeBye::SsdpNotifyRoot(const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpNotifierByeBye
SsdpNotifyRoot	SsdpDv.cpp	/^void SsdpNotifierUpdate::SsdpNotifyRoot(const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpNotifierUpdate
SsdpNotifyServiceType	SsdpDv.cpp	/^void SsdpMsearchResponder::SsdpNotifyServiceType(const Brx& aDomain, const Brx& aType, TUint aVersion, const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpMsearchResponder
SsdpNotifyServiceType	SsdpDv.cpp	/^void SsdpNotifier::SsdpNotifyServiceType(const Brx& aDomain, const Brx& aType, TUint aVersion, const Brx& aUuid, const Brx& aUri, ENotificationType aNotificationType)$/;"	f	class:SsdpNotifier
SsdpNotifyServiceType	SsdpDv.cpp	/^void SsdpNotifierAlive::SsdpNotifyServiceType(const Brx& aDomain, const Brx& aType, TUint aVersion, const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpNotifierAlive
SsdpNotifyServiceType	SsdpDv.cpp	/^void SsdpNotifierByeBye::SsdpNotifyServiceType(const Brx& aDomain, const Brx& aType, TUint aVersion, const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpNotifierByeBye
SsdpNotifyServiceType	SsdpDv.cpp	/^void SsdpNotifierUpdate::SsdpNotifyServiceType(const Brx& aDomain, const Brx& aType, TUint aVersion, const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpNotifierUpdate
SsdpNotifyUuid	SsdpDv.cpp	/^void SsdpMsearchResponder::SsdpNotifyUuid(const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpMsearchResponder
SsdpNotifyUuid	SsdpDv.cpp	/^void SsdpNotifier::SsdpNotifyUuid(const Brx& aUuid, const Brx& aUri, ENotificationType aNotificationType)$/;"	f	class:SsdpNotifier
SsdpNotifyUuid	SsdpDv.cpp	/^void SsdpNotifierAlive::SsdpNotifyUuid(const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpNotifierAlive
SsdpNotifyUuid	SsdpDv.cpp	/^void SsdpNotifierByeBye::SsdpNotifyUuid(const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpNotifierByeBye
SsdpNotifyUuid	SsdpDv.cpp	/^void SsdpNotifierUpdate::SsdpNotifyUuid(const Brx& aUuid, const Brx& aUri)$/;"	f	class:SsdpNotifierUpdate
SsdpSocketReader	Discovery.cpp	/^SsdpSocketReader::SsdpSocketReader(Environment& aEnv, TIpAddress aInterface, const Endpoint& aMulticast)$/;"	f	class:SsdpSocketReader
SsdpSocketReader	Discovery.h	/^class SsdpSocketReader : public SocketUdpMulticast, public IReaderSource$/;"	c	namespace:OpenHome::Net
SsdpWriterMsearchRequest	Ssdp.cpp	/^SsdpWriterMsearchRequest::SsdpWriterMsearchRequest(IWriter& aWriter)$/;"	f	class:SsdpWriterMsearchRequest
SsdpWriterMsearchRequest	Ssdp.h	/^class SsdpWriterMsearchRequest$/;"	c	namespace:OpenHome::Net
Start	SsdpDv.cpp	/^void SsdpNotifier::Start(TIpAddress aInterface, TUint aConfigId)$/;"	f	class:SsdpNotifier
StartCombined	OhNetCombined.cpp	/^void Library::StartCombined(TIpAddress aSubnet, CpStack*& aCpStack, DvStack*& aDvStack)$/;"	f	class:Library
StartCombined	OhNetCombined.cpp	/^void UpnpLibrary::StartCombined(TIpAddress aSubnet)$/;"	f	class:UpnpLibrary
StartCp	OhNetCp.cpp	/^CpStack* Library::StartCp(TIpAddress aSubnet)$/;"	f	class:Library
StartCp	OhNetCp.cpp	/^void UpnpLibrary::StartCp(TIpAddress aSubnet)$/;"	f	class:UpnpLibrary
StartDv	OhNetDv.cpp	/^DvStack* Library::StartDv()$/;"	f	class:Library
StartDv	OhNetDv.cpp	/^void UpnpLibrary::StartDv()$/;"	f	class:UpnpLibrary
Step	Service.cpp	/^TInt ParameterInt::Step() const$/;"	f	class:ParameterInt
Step	Service.cpp	/^TUint ParameterUint::Step() const$/;"	f	class:ParameterUint
Subnet	OhNet.cpp	/^TIpAddress NetworkAdapter::Subnet() const$/;"	f	class:NetworkAdapter
SubnetAddedListener	OhNet.cpp	/^FunctorNetworkAdapter& InitialisationParams::SubnetAddedListener()$/;"	f	class:InitialisationParams
SubnetListChangedListener	OhNet.cpp	/^Functor& InitialisationParams::SubnetListChangedListener()$/;"	f	class:InitialisationParams
SubnetRemovedListener	OhNet.cpp	/^FunctorNetworkAdapter& InitialisationParams::SubnetRemovedListener()$/;"	f	class:InitialisationParams
SubscriptionDurationSecs	OhNet.cpp	/^uint32_t InitialisationParams::SubscriptionDurationSecs() const$/;"	f	class:InitialisationParams
Target	Ssdp.cpp	/^ESsdpTarget SsdpHeaderNt::Target() const$/;"	f	class:SsdpHeaderNt
Target	Ssdp.cpp	/^ESsdpTarget SsdpHeaderSt::Target() const$/;"	f	class:SsdpHeaderSt
Target	Ssdp.cpp	/^ESsdpTarget SsdpHeaderUsn::Target() const$/;"	f	class:SsdpHeaderUsn
TcpConnectTimeoutMs	OhNet.cpp	/^uint32_t InitialisationParams::TcpConnectTimeoutMs() const$/;"	f	class:InitialisationParams
ThreadExitHandler	OhNet.cpp	/^Functor& InitialisationParams::ThreadExitHandler()$/;"	f	class:InitialisationParams
Thunk	FunctorAsync.h	/^    static void Thunk(const FunctorAsync& aFb, IAsync& aAsync)$/;"	f	class:OpenHome::Net::FunctionTranslatorAsync
Thunk	FunctorAsync.h	/^    static void Thunk(const FunctorAsync& aFb, IAsync& aAsync)$/;"	f	class:OpenHome::Net::MemberTranslatorAsync
Thunk	FunctorAsync.h	/^    typedef void (*Thunk)(const FunctorAsync&, IAsync&);$/;"	t	class:OpenHome::Net::FunctorAsync
Timeout	Subscription.cpp	/^TUint HeaderTimeout::Timeout()$/;"	f	class:HeaderTimeout
Type	Service.cpp	/^OpenHome::Net::Parameter::EType OpenHome::Net::Parameter::Type() const$/;"	f	class:OpenHome::Net::Parameter
Type	Ssdp.cpp	/^const Brx& SsdpHeaderNt::Type() const$/;"	f	class:SsdpHeaderNt
Type	Ssdp.cpp	/^const Brx& SsdpHeaderSt::Type() const$/;"	f	class:SsdpHeaderSt
Type	Ssdp.cpp	/^const Brx& SsdpHeaderUsn::Type() const$/;"	f	class:SsdpHeaderUsn
Unlock	Discovery.h	/^        void Unlock() { iLock.Signal(); }$/;"	f	class:OpenHome::Net::SsdpListenerMulticast::Handler
UpnpDomainToCanonical	Ssdp.cpp	/^void Ssdp::UpnpDomainToCanonical(const Brx& aUpnpDomain, Bwx& aCanonicalDomain) \/\/ was CanonicalDomain$/;"	f	class:Ssdp
UpnpLibrary	OhNet.h	/^class DllExportClass UpnpLibrary$/;"	c	namespace:OpenHome::Net
Uuid	Ssdp.cpp	/^const Brx& SsdpHeaderNt::Uuid() const$/;"	f	class:SsdpHeaderNt
Uuid	Ssdp.cpp	/^const Brx& SsdpHeaderSt::Uuid() const$/;"	f	class:SsdpHeaderSt
Uuid	Ssdp.cpp	/^const Brx& SsdpHeaderUsn::Uuid() const$/;"	f	class:SsdpHeaderUsn
ValidateBinary	Service.cpp	/^void OpenHome::Net::Parameter::ValidateBinary(const Brx& \/*aValue*\/) const$/;"	f	class:OpenHome::Net::Parameter
ValidateBinary	Service.cpp	/^void ParameterBinary::ValidateBinary(const Brx& \/*aValue*\/) const$/;"	f	class:ParameterBinary
ValidateBool	Service.cpp	/^void OpenHome::Net::Parameter::ValidateBool(TBool \/*aValue*\/) const$/;"	f	class:OpenHome::Net::Parameter
ValidateBool	Service.cpp	/^void ParameterBool::ValidateBool(TBool \/*aValue*\/) const$/;"	f	class:ParameterBool
ValidateInt	Service.cpp	/^void OpenHome::Net::Parameter::ValidateInt(TInt \/*aValue*\/) const$/;"	f	class:OpenHome::Net::Parameter
ValidateInt	Service.cpp	/^void ParameterInt::ValidateInt(TInt aValue) const$/;"	f	class:ParameterInt
ValidateString	Service.cpp	/^void OpenHome::Net::Parameter::ValidateString(const Brx& \/*aValue*\/) const$/;"	f	class:OpenHome::Net::Parameter
ValidateString	Service.cpp	/^void ParameterString::ValidateString(const Brx& aValue) const$/;"	f	class:ParameterString
ValidateUint	Service.cpp	/^void OpenHome::Net::Parameter::ValidateUint(TUint \/*aValue*\/) const$/;"	f	class:OpenHome::Net::Parameter
ValidateUint	Service.cpp	/^void ParameterUint::ValidateUint(TUint aValue) const$/;"	f	class:ParameterUint
Value	Service.cpp	/^TBool PropertyBool::Value() const$/;"	f	class:PropertyBool
Value	Service.cpp	/^TInt PropertyInt::Value() const$/;"	f	class:PropertyInt
Value	Service.cpp	/^TUint PropertyUint::Value() const$/;"	f	class:PropertyUint
Value	Service.cpp	/^const Brx& PropertyBinary::Value() const$/;"	f	class:PropertyBinary
Value	Service.cpp	/^const Brx& PropertyString::Value() const$/;"	f	class:PropertyString
Value	Subscription.cpp	/^const Brx& HeaderNt::Value() const$/;"	f	class:HeaderNt
VectorMsearchHandler	Discovery.h	/^    typedef std::vector<MsearchHandler*> VectorMsearchHandler;$/;"	t	class:OpenHome::Net::SsdpListenerMulticast
VectorNotifyHandler	Discovery.h	/^    typedef std::vector<NotifyHandler*> VectorNotifyHandler;$/;"	t	class:OpenHome::Net::SsdpListenerMulticast
VectorParameters	Service.h	/^    typedef std::vector<Parameter*> VectorParameters;$/;"	t	class:OpenHome::Net::Action
Version	Service.cpp	/^TUint OpenHome::Net::ServiceType::Version() const$/;"	f	class:OpenHome::Net::ServiceType
Version	Ssdp.cpp	/^TUint SsdpHeaderNt::Version() const$/;"	f	class:SsdpHeaderNt
Version	Ssdp.cpp	/^TUint SsdpHeaderSt::Version() const$/;"	f	class:SsdpHeaderSt
Version	Ssdp.cpp	/^TUint SsdpHeaderUsn::Version() const$/;"	f	class:SsdpHeaderUsn
Write	Service.cpp	/^void PropertyBinary::Write(IPropertyWriter& aWriter)$/;"	f	class:PropertyBinary
Write	Service.cpp	/^void PropertyBool::Write(IPropertyWriter& aWriter)$/;"	f	class:PropertyBool
Write	Service.cpp	/^void PropertyInt::Write(IPropertyWriter& aWriter)$/;"	f	class:PropertyInt
Write	Service.cpp	/^void PropertyString::Write(IPropertyWriter& aWriter)$/;"	f	class:PropertyString
Write	Service.cpp	/^void PropertyUint::Write(IPropertyWriter& aWriter)$/;"	f	class:PropertyUint
WriteBootId	SsdpDv.cpp	/^void Ssdp::WriteBootId(DvStack& aDvStack, IWriterHttpHeader& aWriter)$/;"	f	class:Ssdp
WriteConfigId	Ssdp.cpp	/^void Ssdp::WriteConfigId(IWriterHttpHeader& aWriter, TUint aConfigId)$/;"	f	class:Ssdp
WriteDeviceType	Ssdp.cpp	/^void Ssdp::WriteDeviceType(IWriter& aWriter, const Brx& aDomain, const Brx& aType, TUint aVersion)$/;"	f	class:Ssdp
WriteExt	Ssdp.cpp	/^void Ssdp::WriteExt(IWriterHttpHeader& aWriter)$/;"	f	class:Ssdp
WriteHost	Ssdp.cpp	/^void Ssdp::WriteHost(IWriterHttpHeader& aWriter)$/;"	f	class:Ssdp
WriteLocation	Ssdp.cpp	/^void Ssdp::WriteLocation(IWriterHttpHeader& aWriter, const Brx& aUrl)$/;"	f	class:Ssdp
WriteMan	Ssdp.cpp	/^void Ssdp::WriteMan(IWriterHttpHeader& aWriter)$/;"	f	class:Ssdp
WriteMaxAge	Ssdp.cpp	/^void Ssdp::WriteMaxAge(Environment& aEnv, IWriterHttpHeader& aWriter)$/;"	f	class:Ssdp
WriteMethodMsearch	Ssdp.cpp	/^void Ssdp::WriteMethodMsearch(IWriterHttpMethod& aWriter)$/;"	f	class:Ssdp
WriteMethodNotify	Ssdp.cpp	/^void Ssdp::WriteMethodNotify(IWriterHttpMethod& aWriter)$/;"	f	class:Ssdp
WriteMx	Ssdp.cpp	/^void Ssdp::WriteMx(IWriterHttpHeader& aWriter, TUint aSeconds)$/;"	f	class:Ssdp
WriteNextBootId	SsdpDv.cpp	/^void Ssdp::WriteNextBootId(DvStack& aDvStack, IWriterHttpHeader& aWriter)$/;"	f	class:Ssdp
WriteNotificationTypeDeviceType	Ssdp.cpp	/^void Ssdp::WriteNotificationTypeDeviceType(IWriterHttpHeader& aWriter, const Brx& aDomain, const Brx& aType, TUint aVersion)$/;"	f	class:Ssdp
WriteNotificationTypeRoot	Ssdp.cpp	/^void Ssdp::WriteNotificationTypeRoot(IWriterHttpHeader& aWriter)$/;"	f	class:Ssdp
WriteNotificationTypeServiceType	Ssdp.cpp	/^void Ssdp::WriteNotificationTypeServiceType(IWriterHttpHeader& aWriter, const Brx& aDomain, const Brx& aType, TUint aVersion)$/;"	f	class:Ssdp
WriteNotificationTypeUuid	Ssdp.cpp	/^void Ssdp::WriteNotificationTypeUuid(IWriterHttpHeader& aWriter, const Brx& aUuid)$/;"	f	class:Ssdp
WriteRoot	Ssdp.cpp	/^void Ssdp::WriteRoot(IWriter& aWriter)$/;"	f	class:Ssdp
WriteSearchPort	Ssdp.cpp	/^void Ssdp::WriteSearchPort(IWriterHttpHeader& aWriter, TUint aPort)$/;"	f	class:Ssdp
WriteSearchTypeAll	Ssdp.cpp	/^void Ssdp::WriteSearchTypeAll(IWriterHttpHeader& aWriter)$/;"	f	class:Ssdp
WriteSearchTypeDeviceType	Ssdp.cpp	/^void Ssdp::WriteSearchTypeDeviceType(IWriterHttpHeader& aWriter, const Brx& aDomain, const Brx& aType, TUint aVersion)$/;"	f	class:Ssdp
WriteSearchTypeRoot	Ssdp.cpp	/^void Ssdp::WriteSearchTypeRoot(IWriterHttpHeader& aWriter)$/;"	f	class:Ssdp
WriteSearchTypeServiceType	Ssdp.cpp	/^void Ssdp::WriteSearchTypeServiceType(IWriterHttpHeader& aWriter, const Brx& aDomain, const Brx& aType, TUint aVersion)$/;"	f	class:Ssdp
WriteSearchTypeUuid	Ssdp.cpp	/^void Ssdp::WriteSearchTypeUuid(IWriterHttpHeader& aWriter, const Brx& aUuid)$/;"	f	class:Ssdp
WriteServer	Ssdp.cpp	/^void Ssdp::WriteServer(Environment& aEnv, IWriterHttpHeader& aWriter)$/;"	f	class:Ssdp
WriteServiceType	Ssdp.cpp	/^void Ssdp::WriteServiceType(IWriter& aWriter, const Brx& aDomain, const Brx& aType, TUint aVersion)$/;"	f	class:Ssdp
WriteStatus	Ssdp.cpp	/^void Ssdp::WriteStatus(IWriterHttpStatus& aWriter)$/;"	f	class:Ssdp
WriteSubTypeAlive	Ssdp.cpp	/^void Ssdp::WriteSubTypeAlive(IWriterHttpHeader& aWriter)$/;"	f	class:Ssdp
WriteSubTypeByeBye	Ssdp.cpp	/^void Ssdp::WriteSubTypeByeBye(IWriterHttpHeader& aWriter)$/;"	f	class:Ssdp
WriteUsnDeviceType	Ssdp.cpp	/^void Ssdp::WriteUsnDeviceType(IWriterHttpHeader& aWriter, const Brx& aDomain, const Brx& aType, TUint aVersion, const Brx& aUuid)$/;"	f	class:Ssdp
WriteUsnRoot	Ssdp.cpp	/^void Ssdp::WriteUsnRoot(IWriterHttpHeader& aWriter, const Brx& aUuid)$/;"	f	class:Ssdp
WriteUsnServiceType	Ssdp.cpp	/^void Ssdp::WriteUsnServiceType(IWriterHttpHeader& aWriter, const Brx& aDomain, const Brx& aType, TUint aVersion, const Brx& aUuid)$/;"	f	class:Ssdp
WriteUsnUuid	Ssdp.cpp	/^void Ssdp::WriteUsnUuid(IWriterHttpHeader& aWriter, const Brx& aUuid)$/;"	f	class:Ssdp
WriteUuid	Ssdp.cpp	/^void Ssdp::WriteUuid(IWriter& aWriter, const Brx& aUuid)$/;"	f	class:Ssdp
XmlParserBasic	XmlParser.h	/^class XmlParserBasic$/;"	c	namespace:OpenHome::Net
eAsync	Error.h	/^       ,eAsync$/;"	e	enum:OpenHome::Net::Error::ELevel
eCodeInterrupted	Error.h	/^        eCodeInterrupted = kCodeUnknown+1$/;"	e	enum:OpenHome::Net::Error::ECodeAsync
eCodeParameterInvalid	Error.h	/^        eCodeParameterInvalid = kCodeUnknown+1$/;"	e	enum:OpenHome::Net::Error::ECodeService
eCodeShutdown	Error.h	/^       ,eCodeShutdown$/;"	e	enum:OpenHome::Net::Error::ECodeAsync
eCodeTimeout	Error.h	/^        eCodeTimeout = kCodeUnknown+1$/;"	e	enum:OpenHome::Net::Error::ECodeSocket
eHttp	Error.h	/^       ,eHttp$/;"	e	enum:OpenHome::Net::Error::ELevel
eNone	Error.h	/^        eNone$/;"	e	enum:OpenHome::Net::Error::ELevel
eSearchClose	XmlParser.h	/^       ,eSearchClose$/;"	e	enum:OpenHome::Net::XmlParserBasic::EParserState
eSearchOpen	XmlParser.h	/^        eSearchOpen$/;"	e	enum:OpenHome::Net::XmlParserBasic::EParserState
eService	Error.h	/^       ,eService$/;"	e	enum:OpenHome::Net::Error::ELevel
eSocket	Error.h	/^       ,eSocket$/;"	e	enum:OpenHome::Net::Error::ELevel
eSsdpAll	Ssdp.h	/^    eSsdpAll$/;"	e	enum:OpenHome::Net::ESsdpTarget
eSsdpDeviceType	Ssdp.h	/^    eSsdpDeviceType,$/;"	e	enum:OpenHome::Net::ESsdpTarget
eSsdpRoot	Ssdp.h	/^    eSsdpRoot,$/;"	e	enum:OpenHome::Net::ESsdpTarget
eSsdpServiceType	Ssdp.h	/^    eSsdpServiceType,$/;"	e	enum:OpenHome::Net::ESsdpTarget
eSsdpUnknown	Ssdp.h	/^    eSsdpUnknown,$/;"	e	enum:OpenHome::Net::ESsdpTarget
eSsdpUuid	Ssdp.h	/^    eSsdpUuid,$/;"	e	enum:OpenHome::Net::ESsdpTarget
eTagClose	XmlParser.h	/^       ,eTagClose$/;"	e	enum:OpenHome::Net::XmlParserBasic::ETagType
eTagOpen	XmlParser.h	/^        eTagOpen$/;"	e	enum:OpenHome::Net::XmlParserBasic::ETagType
eTagOpenClose	XmlParser.h	/^       ,eTagOpenClose$/;"	e	enum:OpenHome::Net::XmlParserBasic::ETagType
eTypeBinary	Service.h	/^       ,eTypeBinary$/;"	e	enum:OpenHome::Net::Parameter::EType
eTypeBool	Service.h	/^        eTypeBool$/;"	e	enum:OpenHome::Net::Parameter::EType
eTypeInt	Service.h	/^       ,eTypeInt$/;"	e	enum:OpenHome::Net::Parameter::EType
eTypeRelated	Service.h	/^       ,eTypeRelated$/;"	e	enum:OpenHome::Net::Parameter::EType
eTypeString	Service.h	/^       ,eTypeString$/;"	e	enum:OpenHome::Net::Parameter::EType
eTypeUint	Service.h	/^       ,eTypeUint$/;"	e	enum:OpenHome::Net::Parameter::EType
eUpnp	Error.h	/^       ,eUpnp$/;"	e	enum:OpenHome::Net::Error::ELevel
gCpStack	Globals.cpp	/^OpenHome::Net::CpStack* OpenHome::Net::gCpStack = NULL;$/;"	m	class:OpenHome::Net	file:
gDvStack	Globals.cpp	/^OpenHome::Net::DvStack* OpenHome::Net::gDvStack = NULL;$/;"	m	class:OpenHome::Net	file:
gEnv	Globals.cpp	/^OpenHome::Environment*  OpenHome::gEnv          = NULL;$/;"	m	class:OpenHome	file:
iAdapter	OhNet.h	/^    NetworkAdapter* iAdapter;$/;"	m	class:OpenHome::AutoNetworkAdapterRef
iAdapter	Ssdp.h	/^    TIpAddress iAdapter;$/;"	m	class:OpenHome::Net::SsdpMsearchResponder
iAddress	OhNet.h	/^    TIpAddress iAddress;$/;"	m	class:OpenHome::NetworkAdapter
iAlive	Ssdp.h	/^    TBool iAlive;$/;"	m	class:OpenHome::Net::SsdpHeaderNts
iAsyncBeginHandler	OhNet.h	/^    FunctorAsync iAsyncBeginHandler;$/;"	m	class:OpenHome::Net::InitialisationParams
iAsyncEndHandler	OhNet.h	/^    FunctorAsync iAsyncEndHandler;$/;"	m	class:OpenHome::Net::InitialisationParams
iAsyncErrorHandler	OhNet.h	/^    FunctorAsync iAsyncErrorHandler;$/;"	m	class:OpenHome::Net::InitialisationParams
iBuffer	Discovery.h	/^    Srs<kMaxBufferBytes> iBuffer;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iBuffer	Ssdp.h	/^    Sws<kMaxBufferBytes> iBuffer;$/;"	m	class:OpenHome::Net::SsdpNotifier
iBuffer	Ssdp.h	/^    WriterBuffer iBuffer;$/;"	m	class:OpenHome::Net::SsdpMsearchResponder
iCallback	FunctorAsync.h	/^        OhNetFunctorAsync iCallback;$/;"	m	union:OpenHome::Net::FunctorAsync::__anon1
iCallbackMember	FunctorAsync.h	/^        TByte iCallbackMember[kFudgeFactor * sizeof(MemberFunction)];$/;"	m	union:OpenHome::Net::FunctorAsync::__anon1
iChanged	Service.h	/^    TBool iChanged;$/;"	m	class:OpenHome::Net::Property
iCode	Error.h	/^    TUint iCode;$/;"	m	class:OpenHome::Net::Error
iConfigId	Ssdp.h	/^    TUint iConfigId;$/;"	m	class:OpenHome::Net::SsdpMsearchResponder
iConfigId	Ssdp.h	/^    TUint iConfigId;$/;"	m	class:OpenHome::Net::SsdpNotifier
iCookie	OhNet.h	/^    const char* iCookie;$/;"	m	class:OpenHome::AutoNetworkAdapterRef
iCookies	OhNet.h	/^    std::vector<const char*> iCookies;$/;"	m	class:OpenHome::NetworkAdapter
iCpUpnpEventServerPort	OhNet.h	/^    uint32_t iCpUpnpEventServerPort;$/;"	m	class:OpenHome::Net::InitialisationParams
iDead	Discovery.h	/^        TBool iDead;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast::Handler
iDefaultAsyncHandler	OhNet.h	/^    DefaultAsyncHandler* iDefaultAsyncHandler;$/;"	m	class:OpenHome::Net::InitialisationParams
iDefaultLogger	OhNet.h	/^    DefaultLogger* iDefaultLogger;$/;"	m	class:OpenHome::Net::InitialisationParams
iDescription	Error.h	/^    Brhz  iDescription;$/;"	m	class:OpenHome::Net::Error
iDomain	Service.h	/^    Brh iDomain;$/;"	m	class:OpenHome::Net::ServiceType
iDomain	Ssdp.h	/^    Bws<kMaxDomainBytes> iDomain;$/;"	m	class:OpenHome::Net::SsdpHeaderNt
iDomain	Ssdp.h	/^    Bws<kMaxDomainBytes> iDomain;$/;"	m	class:OpenHome::Net::SsdpHeaderSt
iDomain	Ssdp.h	/^    Bws<kMaxDomainBytes> iDomain;$/;"	m	class:OpenHome::Net::SsdpHeaderUsn
iDvLpecServerPort	OhNet.h	/^    uint32_t iDvLpecServerPort;$/;"	m	class:OpenHome::Net::InitialisationParams
iDvMaxUpdateTimeSecs	OhNet.h	/^    uint32_t iDvMaxUpdateTimeSecs;$/;"	m	class:OpenHome::Net::InitialisationParams
iDvNumLpecThreads	OhNet.h	/^    uint32_t iDvNumLpecThreads;$/;"	m	class:OpenHome::Net::InitialisationParams
iDvNumPublisherThreads	OhNet.h	/^    uint32_t iDvNumPublisherThreads;$/;"	m	class:OpenHome::Net::InitialisationParams
iDvNumServerThreads	OhNet.h	/^    uint32_t iDvNumServerThreads;$/;"	m	class:OpenHome::Net::InitialisationParams
iDvNumWebSocketThreads	OhNet.h	/^    uint32_t iDvNumWebSocketThreads;$/;"	m	class:OpenHome::Net::InitialisationParams
iDvStack	Ssdp.h	/^    DvStack& iDvStack;$/;"	m	class:OpenHome::Net::SsdpMsearchResponder
iDvStack	Ssdp.h	/^    DvStack& iDvStack;$/;"	m	class:OpenHome::Net::SsdpNotifier
iDvUpnpWebServerPort	OhNet.h	/^    uint32_t iDvUpnpWebServerPort;$/;"	m	class:OpenHome::Net::InitialisationParams
iDvWebSocketPort	OhNet.h	/^    uint32_t iDvWebSocketPort;$/;"	m	class:OpenHome::Net::InitialisationParams
iEnableBonjour	OhNet.h	/^    bool iEnableBonjour;$/;"	m	class:OpenHome::Net::InitialisationParams
iEnv	Discovery.h	/^    Environment& iEnv;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iEnv	Discovery.h	/^    Environment& iEnv;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
iEnv	OhNet.h	/^    Environment* iEnv;$/;"	m	class:OpenHome::NetworkAdapter
iEnv	OhNet.h	/^    OpenHome::Environment* iEnv;$/;"	m	class:OpenHome::Net::Library
iEnv	Service.h	/^    Environment& iEnv;$/;"	m	class:OpenHome::Net::ServiceType
iEnvOwner	OhNet.h	/^    OpenHome::TBool iEnvOwner;$/;"	m	class:OpenHome::Net::Library
iExiting	Discovery.h	/^    TBool iExiting;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iExiting	Discovery.h	/^    TBool iExiting;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
iFatalErrorHandler	OhNet.h	/^    FunctorMsg iFatalErrorHandler;$/;"	m	class:OpenHome::Net::InitialisationParams
iFreeExternal	OhNet.h	/^    OhNetCallbackFreeExternal iFreeExternal;$/;"	m	class:OpenHome::Net::InitialisationParams
iFullName	Service.h	/^    mutable Bwh iFullName;$/;"	m	class:OpenHome::Net::ServiceType
iFunctor	Service.h	/^    Functor iFunctor;$/;"	m	class:OpenHome::Net::Property
iHandler	Discovery.h	/^        ISsdpMsearchHandler* iHandler;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast::MsearchHandler
iHandler	Discovery.h	/^        ISsdpNotifyHandler* iHandler;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast::NotifyHandler
iHeaderCacheControl	Discovery.h	/^    SsdpHeaderCacheControl iHeaderCacheControl;$/;"	m	class:OpenHome::Net::SsdpListener
iHeaderExt	Discovery.h	/^    SsdpHeaderExt iHeaderExt;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
iHeaderHost	Discovery.h	/^    SsdpHeaderHost iHeaderHost;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iHeaderLocation	Discovery.h	/^    HttpHeaderLocation iHeaderLocation;$/;"	m	class:OpenHome::Net::SsdpListener
iHeaderMan	Discovery.h	/^    SsdpHeaderMan iHeaderMan;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iHeaderMx	Discovery.h	/^    SsdpHeaderMx iHeaderMx;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iHeaderNt	Discovery.h	/^    SsdpHeaderNt iHeaderNt;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iHeaderNts	Discovery.h	/^    SsdpHeaderNts iHeaderNts;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iHeaderServer	Discovery.h	/^    SsdpHeaderServer iHeaderServer;$/;"	m	class:OpenHome::Net::SsdpListener
iHeaderSt	Discovery.h	/^    SsdpHeaderSt iHeaderSt;$/;"	m	class:OpenHome::Net::SsdpListener
iHeaderUsn	Discovery.h	/^    SsdpHeaderUsn iHeaderUsn;$/;"	m	class:OpenHome::Net::SsdpListener
iHostUdpLowQuality	OhNet.h	/^    bool iHostUdpLowQuality;$/;"	m	class:OpenHome::Net::InitialisationParams
iId	Discovery.h	/^        TInt iId;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast::Handler
iInputParameters	Service.h	/^    VectorParameters iInputParameters;$/;"	m	class:OpenHome::Net::Action
iInterface	Discovery.h	/^    TIpAddress iInterface;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iInterface	Discovery.h	/^    TIpAddress iInterface;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
iLevel	Error.h	/^    ELevel iLevel;$/;"	m	class:OpenHome::Net::Error
iLock	Discovery.h	/^        OpenHome::Mutex iLock;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast::Handler
iLock	Discovery.h	/^    OpenHome::Mutex iLock;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iLock	Service.h	/^    mutable Mutex iLock;$/;"	m	class:OpenHome::Net::Property
iLogOutput	OhNet.h	/^    FunctorMsg iLogOutput;$/;"	m	class:OpenHome::Net::InitialisationParams
iMap	Service.h	/^    Map iMap;$/;"	m	class:OpenHome::Net::ParameterString
iMaxAge	Ssdp.h	/^    TUint iMaxAge;$/;"	m	class:OpenHome::Net::SsdpHeaderCacheControl
iMaxValue	Service.h	/^    TInt iMaxValue;$/;"	m	class:OpenHome::Net::ParameterInt
iMaxValue	Service.h	/^    TUint iMaxValue;$/;"	m	class:OpenHome::Net::ParameterUint
iMinValue	Service.h	/^    TInt iMinValue;$/;"	m	class:OpenHome::Net::ParameterInt
iMinValue	Service.h	/^    TUint iMinValue;$/;"	m	class:OpenHome::Net::ParameterUint
iMsearchHandlers	Discovery.h	/^    VectorMsearchHandler iMsearchHandlers;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iMsearchTimeSecs	OhNet.h	/^    uint32_t iMsearchTimeSecs;$/;"	m	class:OpenHome::Net::InitialisationParams
iMsearchTtl	OhNet.h	/^    uint32_t iMsearchTtl;$/;"	m	class:OpenHome::Net::InitialisationParams
iMx	Ssdp.h	/^    TUint iMx;$/;"	m	class:OpenHome::Net::SsdpHeaderMx
iName	OhNet.h	/^    Brhz iName;$/;"	m	class:OpenHome::NetworkAdapter
iName	Service.h	/^    Brh iName;$/;"	m	class:OpenHome::Net::ServiceType
iName	Service.h	/^    Brhz iName;$/;"	m	class:OpenHome::Net::Action
iName	Service.h	/^    Brhz iName;$/;"	m	class:OpenHome::Net::Parameter
iNetMask	OhNet.h	/^    TIpAddress iNetMask;$/;"	m	class:OpenHome::NetworkAdapter
iNetworkAdapterChangedListener	OhNet.h	/^    FunctorNetworkAdapter iNetworkAdapterChangedListener;$/;"	m	class:OpenHome::Net::InitialisationParams
iNextHandlerId	Discovery.h	/^    TInt iNextHandlerId;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iNotifier	Ssdp.h	/^    SsdpNotifier& iNotifier;$/;"	m	class:OpenHome::Net::SsdpNotifierAlive
iNotifier	Ssdp.h	/^    SsdpNotifier& iNotifier;$/;"	m	class:OpenHome::Net::SsdpNotifierByeBye
iNotifier	Ssdp.h	/^    SsdpNotifier& iNotifier;$/;"	m	class:OpenHome::Net::SsdpNotifierUpdate
iNotifyHandler	Discovery.h	/^    ISsdpNotifyHandler& iNotifyHandler;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
iNotifyHandlers	Discovery.h	/^    VectorNotifyHandler iNotifyHandlers;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iNumActionInvokerThreads	OhNet.h	/^    uint32_t iNumActionInvokerThreads;$/;"	m	class:OpenHome::Net::InitialisationParams
iNumEventSessionThreads	OhNet.h	/^    uint32_t iNumEventSessionThreads;$/;"	m	class:OpenHome::Net::InitialisationParams
iNumInvocations	OhNet.h	/^    uint32_t iNumInvocations;$/;"	m	class:OpenHome::Net::InitialisationParams
iNumSubscriberThreads	OhNet.h	/^    uint32_t iNumSubscriberThreads;$/;"	m	class:OpenHome::Net::InitialisationParams
iNumXmlFetcherThreads	OhNet.h	/^    uint32_t iNumXmlFetcherThreads;$/;"	m	class:OpenHome::Net::InitialisationParams
iObject	FunctorAsync.h	/^    TAny* iObject;$/;"	m	class:OpenHome::Net::FunctorAsync
iOutputParameters	Service.h	/^    VectorParameters iOutputParameters;$/;"	m	class:OpenHome::Net::Action
iParameter	Service.h	/^    OpenHome::Net::Parameter* iParameter;$/;"	m	class:OpenHome::Net::Property
iPathUpnp	Service.h	/^    mutable Bwh iPathUpnp;$/;"	m	class:OpenHome::Net::ServiceType
iPendingSubscriptionTimeoutMs	OhNet.h	/^    uint32_t iPendingSubscriptionTimeoutMs;$/;"	m	class:OpenHome::Net::InitialisationParams
iReadBuffer	Discovery.h	/^    Srs<kMaxBufferBytes> iReadBuffer;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
iReader	Discovery.h	/^    UdpReader* iReader;$/;"	m	class:OpenHome::Net::SsdpSocketReader
iReaderRequest	Discovery.h	/^    ReaderHttpRequest iReaderRequest;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iReaderResponse	Discovery.h	/^    ReaderHttpResponse iReaderResponse;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
iReaderUntil	Discovery.h	/^    ReaderUntilS<kMaxBufferBytes> iReaderUntil;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iReaderUntil	Discovery.h	/^    ReaderUntilS<kMaxBufferBytes> iReaderUntil;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
iRecreateSocket	Discovery.h	/^    TBool iRecreateSocket;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iRecreateSocket	Discovery.h	/^    TBool iRecreateSocket;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
iRefCount	OhNet.h	/^    TUint iRefCount;$/;"	m	class:OpenHome::NetworkAdapter
iRelated	Service.h	/^    const OpenHome::Net::Property& iRelated;$/;"	m	class:OpenHome::Net::ParameterRelated
iRemote	Ssdp.h	/^    Endpoint iRemote;$/;"	m	class:OpenHome::Net::SsdpMsearchResponder
iResponse	Ssdp.h	/^    Bws<kMaxBufferBytes> iResponse;$/;"	m	class:OpenHome::Net::SsdpMsearchResponder
iSequenceNumber	Service.h	/^    TUint iSequenceNumber;$/;"	m	class:OpenHome::Net::Property
iServiceId	Service.h	/^    mutable Bwh iServiceId;$/;"	m	class:OpenHome::Net::ServiceType
iServiceType	Service.h	/^    OpenHome::Net::ServiceType iServiceType;$/;"	m	class:OpenHome::Net::Service
iServiceType	Service.h	/^    mutable Bwh iServiceType;$/;"	m	class:OpenHome::Net::ServiceType
iSid	Subscription.h	/^    Brh iSid;$/;"	m	class:OpenHome::Net::HeaderSid
iSocket	Discovery.h	/^    SocketUdp iSocket;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
iSocket	Discovery.h	/^    SsdpSocketReader iSocket;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
iSocket	Ssdp.h	/^    SocketUdp iSocket;$/;"	m	class:OpenHome::Net::SsdpNotifier
iSocketReader	Discovery.h	/^    UdpReader iSocketReader;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
iSocketWriter	Discovery.h	/^    UdpWriter iSocketWriter;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
iSocketWriter	Ssdp.h	/^    UdpWriter iSocketWriter;$/;"	m	class:OpenHome::Net::SsdpNotifier
iStep	Service.h	/^    TInt iStep;$/;"	m	class:OpenHome::Net::ParameterInt
iStep	Service.h	/^    TUint iStep;$/;"	m	class:OpenHome::Net::ParameterUint
iSubnetAddedListener	OhNet.h	/^    FunctorNetworkAdapter iSubnetAddedListener;$/;"	m	class:OpenHome::Net::InitialisationParams
iSubnetListChangedListener	OhNet.h	/^    Functor iSubnetListChangedListener;$/;"	m	class:OpenHome::Net::InitialisationParams
iSubnetRemovedListener	OhNet.h	/^    FunctorNetworkAdapter iSubnetRemovedListener;$/;"	m	class:OpenHome::Net::InitialisationParams
iSubscriptionDurationSecs	OhNet.h	/^    uint32_t iSubscriptionDurationSecs;$/;"	m	class:OpenHome::Net::InitialisationParams
iTarget	Ssdp.h	/^    ESsdpTarget iTarget;$/;"	m	class:OpenHome::Net::SsdpHeaderNt
iTarget	Ssdp.h	/^    ESsdpTarget iTarget;$/;"	m	class:OpenHome::Net::SsdpHeaderSt
iTarget	Ssdp.h	/^    ESsdpTarget iTarget;$/;"	m	class:OpenHome::Net::SsdpHeaderUsn
iTcpConnectTimeoutMs	OhNet.h	/^    uint32_t iTcpConnectTimeoutMs;$/;"	m	class:OpenHome::Net::InitialisationParams
iThreadExitHandler	OhNet.h	/^    Functor iThreadExitHandler;$/;"	m	class:OpenHome::Net::InitialisationParams
iThunk	FunctorAsync.h	/^    Thunk iThunk;$/;"	m	class:OpenHome::Net::FunctorAsync
iTimeout	Subscription.h	/^    TUint iTimeout;$/;"	m	class:OpenHome::Net::HeaderTimeout
iType	Service.h	/^    EType iType;$/;"	m	class:OpenHome::Net::Parameter
iType	Ssdp.h	/^    Bws<kMaxTypeBytes> iType;$/;"	m	class:OpenHome::Net::SsdpHeaderNt
iType	Ssdp.h	/^    Bws<kMaxTypeBytes> iType;$/;"	m	class:OpenHome::Net::SsdpHeaderSt
iType	Ssdp.h	/^    Bws<kMaxTypeBytes> iType;$/;"	m	class:OpenHome::Net::SsdpHeaderUsn
iUseLoopbackNetworkAdapter	OhNet.h	/^    ELoopback iUseLoopbackNetworkAdapter;$/;"	m	class:OpenHome::Net::InitialisationParams
iUuid	Ssdp.h	/^    Bws<kMaxUuidBytes> iUuid;$/;"	m	class:OpenHome::Net::SsdpHeaderNt
iUuid	Ssdp.h	/^    Bws<kMaxUuidBytes> iUuid;$/;"	m	class:OpenHome::Net::SsdpHeaderSt
iUuid	Ssdp.h	/^    Bws<kMaxUuidBytes> iUuid;$/;"	m	class:OpenHome::Net::SsdpHeaderUsn
iValue	Service.h	/^    Brh iValue;$/;"	m	class:OpenHome::Net::PropertyBinary
iValue	Service.h	/^    Brhz iValue;$/;"	m	class:OpenHome::Net::PropertyString
iValue	Service.h	/^    TBool iValue;$/;"	m	class:OpenHome::Net::PropertyBool
iValue	Service.h	/^    TInt iValue;$/;"	m	class:OpenHome::Net::PropertyInt
iValue	Service.h	/^    TUint iValue;$/;"	m	class:OpenHome::Net::PropertyUint
iValue	Subscription.h	/^    Brh iValue;$/;"	m	class:OpenHome::Net::HeaderNt
iVersion	Service.h	/^    TUint iVersion;$/;"	m	class:OpenHome::Net::ServiceType
iVersion	Ssdp.h	/^    TUint iVersion;$/;"	m	class:OpenHome::Net::SsdpHeaderNt
iVersion	Ssdp.h	/^    TUint iVersion;$/;"	m	class:OpenHome::Net::SsdpHeaderSt
iVersion	Ssdp.h	/^    TUint iVersion;$/;"	m	class:OpenHome::Net::SsdpHeaderUsn
iWriteBuffer	Discovery.h	/^    Sws<kMaxBufferBytes> iWriteBuffer;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
iWriter	Discovery.h	/^    SsdpWriterMsearchRequest iWriter;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
iWriter	Ssdp.h	/^    WriterHttpRequest iWriter;$/;"	m	class:OpenHome::Net::SsdpNotifier
iWriter	Ssdp.h	/^    WriterHttpRequest iWriter;$/;"	m	class:OpenHome::Net::SsdpWriterMsearchRequest
iWriter	Ssdp.h	/^    WriterHttpResponse iWriter;$/;"	m	class:OpenHome::Net::SsdpMsearchResponder
iWriterLock	Discovery.h	/^    Mutex iWriterLock;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
kCodeNoError	Error.h	/^    static const TUint kCodeNoError = 0;$/;"	m	class:OpenHome::Net::Error
kCodeUnknown	Error.h	/^    static const TUint kCodeUnknown = 1;$/;"	m	class:OpenHome::Net::Error
kDescriptionAsyncInterrupted	Error.h	/^    static const Brn kDescriptionAsyncInterrupted;$/;"	m	class:OpenHome::Net::Error
kDescriptionAsyncShutdown	Error.h	/^    static const Brn kDescriptionAsyncShutdown;$/;"	m	class:OpenHome::Net::Error
kDescriptionParameterInvalid	Error.h	/^    static const Brn kDescriptionParameterInvalid;$/;"	m	class:OpenHome::Net::Error
kDescriptionSocketTimeout	Error.h	/^    static const Brn kDescriptionSocketTimeout;$/;"	m	class:OpenHome::Net::Error
kDescriptionUnknown	Error.h	/^    static const Brn kDescriptionUnknown;$/;"	m	class:OpenHome::Net::Error
kDeviceSeparator	Ssdp.h	/^    static const Brn kDeviceSeparator;$/;"	m	class:OpenHome::Net::Ssdp
kFieldSidPrefix	Subscription.h	/^    static const Brn kFieldSidPrefix;$/;"	m	class:OpenHome::Net::HeaderSid
kFieldTimeoutPrefix	Subscription.h	/^    static const Brn kFieldTimeoutPrefix;$/;"	m	class:OpenHome::Net::HeaderTimeout
kFudgeFactor	FunctorAsync.h	/^    static const TUint kFudgeFactor = 2;$/;"	m	class:OpenHome::Net::FunctorAsync
kHeaderBootId	Ssdp.h	/^    static const Brn kHeaderBootId;$/;"	m	class:OpenHome::Net::Ssdp
kHeaderCacheControl	Ssdp.h	/^    static const Brn kHeaderCacheControl;$/;"	m	class:OpenHome::Net::Ssdp
kHeaderConfigId	Ssdp.h	/^    static const Brn kHeaderConfigId;$/;"	m	class:OpenHome::Net::Ssdp
kHeaderExt	Ssdp.h	/^    static const Brn kHeaderExt;$/;"	m	class:OpenHome::Net::Ssdp
kHeaderHost	Ssdp.h	/^    static const Brn kHeaderHost;$/;"	m	class:OpenHome::Net::Ssdp
kHeaderLocation	Ssdp.h	/^    static const Brn kHeaderLocation;$/;"	m	class:OpenHome::Net::Ssdp
kHeaderMan	Ssdp.h	/^    static const Brn kHeaderMan;$/;"	m	class:OpenHome::Net::Ssdp
kHeaderMx	Ssdp.h	/^    static const Brn kHeaderMx;$/;"	m	class:OpenHome::Net::Ssdp
kHeaderNextBootId	Ssdp.h	/^    static const Brn kHeaderNextBootId;$/;"	m	class:OpenHome::Net::Ssdp
kHeaderNt	Ssdp.h	/^    static const Brn kHeaderNt;$/;"	m	class:OpenHome::Net::Ssdp
kHeaderNts	Ssdp.h	/^    static const Brn kHeaderNts;$/;"	m	class:OpenHome::Net::Ssdp
kHeaderSearchPort	Ssdp.h	/^    static const Brn kHeaderSearchPort;$/;"	m	class:OpenHome::Net::Ssdp
kHeaderServer	Ssdp.h	/^    static const Brn kHeaderServer;$/;"	m	class:OpenHome::Net::Ssdp
kHeaderSid	Subscription.h	/^    static const Brn kHeaderSid;$/;"	m	class:OpenHome::Net::HeaderSid
kHeaderSt	Ssdp.h	/^    static const Brn kHeaderSt;$/;"	m	class:OpenHome::Net::Ssdp
kHeaderTimeout	Subscription.h	/^    static const Brn kHeaderTimeout;$/;"	m	class:OpenHome::Net::HeaderTimeout
kHeaderUsn	Ssdp.h	/^    static const Brn kHeaderUsn;$/;"	m	class:OpenHome::Net::Ssdp
kMaxBufferBytes	Discovery.h	/^    static const TUint kMaxBufferBytes = 1024;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
kMaxBufferBytes	Discovery.h	/^    static const TUint kMaxBufferBytes = 1024;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
kMaxBufferBytes	Ssdp.h	/^    static const TUint kMaxBufferBytes = 1024;$/;"	m	class:OpenHome::Net::SsdpMsearchResponder
kMaxBufferBytes	Ssdp.h	/^    static const TUint kMaxBufferBytes = 1024;$/;"	m	class:OpenHome::Net::SsdpNotifier
kMaxDomainBytes	Ssdp.cpp	/^static const TUint kMaxDomainBytes = 64;$/;"	v	file:
kMaxDomainBytes	Ssdp.h	/^    static const TUint kMaxDomainBytes = 64;$/;"	m	class:OpenHome::Net::SsdpHeaderNt
kMaxDomainBytes	Ssdp.h	/^    static const TUint kMaxDomainBytes = 64;$/;"	m	class:OpenHome::Net::SsdpHeaderSt
kMaxDomainBytes	Ssdp.h	/^    static const TUint kMaxDomainBytes = 64;$/;"	m	class:OpenHome::Net::SsdpHeaderUsn
kMaxMsearchSeconds	Ssdp.h	/^    static const TUint kMaxMsearchSeconds = 120;$/;"	m	class:OpenHome::Net::SsdpWriterMsearchRequest
kMaxTypeBytes	Ssdp.h	/^    static const TUint kMaxTypeBytes = 64;$/;"	m	class:OpenHome::Net::SsdpHeaderNt
kMaxTypeBytes	Ssdp.h	/^    static const TUint kMaxTypeBytes = 64;$/;"	m	class:OpenHome::Net::SsdpHeaderSt
kMaxTypeBytes	Ssdp.h	/^    static const TUint kMaxTypeBytes = 64;$/;"	m	class:OpenHome::Net::SsdpHeaderUsn
kMaxUuidBytes	Ssdp.h	/^    static const TUint kMaxUuidBytes = 64;$/;"	m	class:OpenHome::Net::SsdpHeaderNt
kMaxUuidBytes	Ssdp.h	/^    static const TUint kMaxUuidBytes = 64;$/;"	m	class:OpenHome::Net::SsdpHeaderSt
kMaxUuidBytes	Ssdp.h	/^    static const TUint kMaxUuidBytes = 64;$/;"	m	class:OpenHome::Net::SsdpHeaderUsn
kMethodMsearch	Ssdp.h	/^    static const Brn kMethodMsearch;$/;"	m	class:OpenHome::Net::Ssdp
kMethodNotify	Ssdp.h	/^    static const Brn kMethodNotify;$/;"	m	class:OpenHome::Net::Ssdp
kMethodUri	Ssdp.h	/^    static const Brn kMethodUri;$/;"	m	class:OpenHome::Net::Ssdp
kMinMsearchSeconds	Ssdp.h	/^    static const TUint kMinMsearchSeconds = 1;$/;"	m	class:OpenHome::Net::SsdpWriterMsearchRequest
kMulticastAddress	Ssdp.h	/^    static const Brn kMulticastAddress;$/;"	m	class:OpenHome::Net::Ssdp
kMulticastAddressAndPort	Ssdp.h	/^    static const Brn kMulticastAddressAndPort;$/;"	m	class:OpenHome::Net::Ssdp
kMulticastPort	Ssdp.cpp	/^const TUint Ssdp::kMulticastPort = 1900;$/;"	m	class:Ssdp	file:
kMulticastPort	Ssdp.h	/^    static const TUint kMulticastPort;$/;"	m	class:OpenHome::Net::Ssdp
kPriority	Discovery.h	/^    static const TUint kPriority = kPriorityNormal;$/;"	m	class:OpenHome::Net::SsdpListener
kRecvBufBytes	Discovery.h	/^    static const TUint kRecvBufBytes = 32 * 1024;$/;"	m	class:OpenHome::Net::SsdpListenerMulticast
kRecvBufBytes	Discovery.h	/^    static const TUint kRecvBufBytes = 64 * 1024;$/;"	m	class:OpenHome::Net::SsdpListenerUnicast
kService	Service.h	/^    static const Brn kService;$/;"	m	class:OpenHome::Net::ServiceType
kServiceId	Service.h	/^    static const Brn kServiceId;$/;"	m	class:OpenHome::Net::ServiceType
kServiceSeparator	Ssdp.h	/^    static const Brn kServiceSeparator;$/;"	m	class:OpenHome::Net::Ssdp
kStatusOk	Ssdp.h	/^    static const Brn kStatusOk;$/;"	m	class:OpenHome::Net::Ssdp
kStep	Service.h	/^       ,kStep     = 1$/;"	e	enum:OpenHome::Net::ParameterInt::__anon2
kStep	Service.h	/^       ,kStep     = 1$/;"	e	enum:OpenHome::Net::ParameterUint::__anon3
kUrn	Service.h	/^    static const Brn kUrn;$/;"	m	class:OpenHome::Net::ServiceType
kUrn	Ssdp.h	/^    static const Brn kUrn;$/;"	m	class:OpenHome::Net::Ssdp
kUrnSeparator	Ssdp.cpp	/^const TByte Ssdp::kUrnSeparator = ':';$/;"	m	class:Ssdp	file:
kUrnSeparator	Ssdp.h	/^    static const TByte kUrnSeparator;$/;"	m	class:OpenHome::Net::Ssdp
kValueMax	Service.h	/^       ,kValueMax = INT32_MAX$/;"	e	enum:OpenHome::Net::ParameterInt::__anon2
kValueMax	Service.h	/^       ,kValueMax = UINT32_MAX$/;"	e	enum:OpenHome::Net::ParameterUint::__anon3
kValueMin	Service.h	/^        kValueMin = 0$/;"	e	enum:OpenHome::Net::ParameterUint::__anon3
kValueMin	Service.h	/^        kValueMin = INT32_MIN$/;"	e	enum:OpenHome::Net::ParameterInt::__anon2
operator ()	FunctorAsync.h	/^    void operator()(IAsync& aAsync) const { iThunk(*this, aAsync); }$/;"	f	class:OpenHome::Net::FunctorAsync
operator TBool	FunctorAsync.h	/^    operator TBool() const { return (iObject!=NULL || iCallback!=NULL); }$/;"	f	class:OpenHome::Net::FunctorAsync
~Action	Service.cpp	/^OpenHome::Net::Action::~Action()$/;"	f	class:OpenHome::Net::Action
~AutoNetworkAdapterRef	OhNet.cpp	/^AutoNetworkAdapterRef::~AutoNetworkAdapterRef()$/;"	f	class:AutoNetworkAdapterRef
~DefaultAsyncHandler	OhNet.cpp	/^    virtual ~DefaultAsyncHandler() {}$/;"	f	class:OpenHome::Net::DefaultAsyncHandler
~IAsync	FunctorAsync.h	/^    virtual ~IAsync() {}$/;"	f	class:OpenHome::Net::IAsync
~IAsyncOutput	FunctorAsync.h	/^    virtual ~IAsyncOutput() {}$/;"	f	class:OpenHome::Net::IAsyncOutput
~IPropertyWriter	Service.h	/^    virtual ~IPropertyWriter() {}$/;"	f	class:OpenHome::Net::IPropertyWriter
~ISsdpMsearchHandler	Discovery.h	/^    virtual ~ISsdpMsearchHandler() {}$/;"	f	class:OpenHome::Net::ISsdpMsearchHandler
~ISsdpNotify	Ssdp.h	/^    virtual ~ISsdpNotify() {}$/;"	f	class:OpenHome::Net::ISsdpNotify
~ISsdpNotifyHandler	Discovery.h	/^    virtual ~ISsdpNotifyHandler() {}$/;"	f	class:OpenHome::Net::ISsdpNotifyHandler
~InitialisationParams	OhNet.cpp	/^InitialisationParams::~InitialisationParams()$/;"	f	class:InitialisationParams
~Library	OhNet.cpp	/^Library::~Library()$/;"	f	class:Library
~NetworkAdapter	OhNet.cpp	/^NetworkAdapter::~NetworkAdapter()$/;"	f	class:NetworkAdapter
~Parameter	Service.cpp	/^OpenHome::Net::Parameter::~Parameter()$/;"	f	class:OpenHome::Net::Parameter
~ParameterBinary	Service.cpp	/^ParameterBinary::~ParameterBinary()$/;"	f	class:ParameterBinary
~ParameterBool	Service.cpp	/^ParameterBool::~ParameterBool()$/;"	f	class:ParameterBool
~ParameterInt	Service.cpp	/^ParameterInt::~ParameterInt()$/;"	f	class:ParameterInt
~ParameterRelated	Service.cpp	/^ParameterRelated::~ParameterRelated()$/;"	f	class:ParameterRelated
~ParameterString	Service.cpp	/^ParameterString::~ParameterString()$/;"	f	class:ParameterString
~ParameterUint	Service.cpp	/^ParameterUint::~ParameterUint()$/;"	f	class:ParameterUint
~Property	Service.cpp	/^Property::~Property()$/;"	f	class:Property
~PropertyBinary	Service.cpp	/^PropertyBinary::~PropertyBinary()$/;"	f	class:PropertyBinary
~PropertyBool	Service.cpp	/^PropertyBool::~PropertyBool()$/;"	f	class:PropertyBool
~PropertyInt	Service.cpp	/^PropertyInt::~PropertyInt()$/;"	f	class:PropertyInt
~PropertyString	Service.cpp	/^PropertyString::~PropertyString()$/;"	f	class:PropertyString
~PropertyUint	Service.cpp	/^PropertyUint::~PropertyUint()$/;"	f	class:PropertyUint
~Service	Service.h	/^    virtual ~Service() {}$/;"	f	class:OpenHome::Net::Service
~ServiceType	Service.cpp	/^OpenHome::Net::ServiceType::~ServiceType()$/;"	f	class:OpenHome::Net::ServiceType
~SsdpListenerMulticast	Discovery.cpp	/^SsdpListenerMulticast::~SsdpListenerMulticast()$/;"	f	class:SsdpListenerMulticast
~SsdpListenerUnicast	Discovery.cpp	/^SsdpListenerUnicast::~SsdpListenerUnicast()$/;"	f	class:SsdpListenerUnicast
~SsdpSocketReader	Discovery.cpp	/^SsdpSocketReader::~SsdpSocketReader()$/;"	f	class:SsdpSocketReader
