<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Actions</title>

  <para>A service's actions are represented in code by functions. The
  functions cover the Control section of the UPnP architecture.</para>

  <para>Each action is represented in a Proxy by three functions. Two of these
  are begin and end functions for an asynchronous invocation of the action.
  This gives you the option of providing your Control Point application with a
  faster and more responsive user interface. You can execute actions while
  others complete, or cancel long-running actions if required.</para>

  <para>Using the asynchronous calls offers you the opportunity to develop a
  very high quality and responsive application that offers users a truly
  interactive experience.</para>

  <note>
    <para>You can safely delete a Proxy object in code while one or more
    asynchronous actions are outstanding.</para>

    <para>The destructor will block each callback that was passed to a Begin
    function and has been run. It is highly likely that the callbacks won't
    have waited for the actions to actually complete their task on the remote
    device. Therefore any corresponding End functions that are called will
    signal errors instead.</para>
  </note>

  <para>The third function is a synchronous invocation of the action. You can
  use this function to develop a simpler application that only updates the
  user interface when the action on the remote device completes.</para>

  <para>Using the synchronous functions makes the Control Point application
  easier to develop. However, the disadvantage of synchronous calls is that it
  risks the application looking like it has frozen while it waits for the
  action to complete. Long sequences of actions will take longer as
  synchronized calls are serialized rather than run in parallel. Users will be
  unable to use other actions until the sequence of calls on the remote device
  has completed. A targeted use of synchronous invocations in a few special
  cases can be useful, but general use is not recommended.</para>

  <para>The auto-generated names of the functions use the name of the action
  as it appears in the service XML.</para>

  <para>The synchronous invocation takes the following name:</para>

  <para><code>Sync<replaceable>&lt;action_name&gt;</replaceable>(<replaceable>&lt;argument_list&gt;</replaceable>)</code></para>

  <para>The asynchronous invocations take the following names:</para>

  <para><code>Begin<replaceable>&lt;action_name&gt;</replaceable>(<replaceable>&lt;input_argument_list&gt;</replaceable>,
  FunctorAsync&amp; aActionComplete)</code></para>

  <para><code>End<replaceable>&lt;action_name&gt;</replaceable>(IAsync&amp;
  aAsync,
  <replaceable>&lt;output_argument_list&gt;</replaceable>)</code></para>

  <note>
    <para>The handle used in the
    <code>End<replaceable>&lt;action_name&gt;</replaceable></code> function is
    the same one passed to the aActionComplete callback, which was originally
    passed to the Begin&lt;action_name&gt; function.</para>
  </note>

  <para>For example, an action called <code>SetVolume</code> which takes a
  single uint input argument in the service XML generates the following three
  functions:</para>

  <itemizedlist>
    <listitem>
      <para><code>SyncSetVolume(uint32_t aValue)</code> </para>
    </listitem>

    <listitem>
      <para><code>BeginSetVolume(uint32_t aValue, FunctorAsync&amp;
      aFunctor)</code> </para>
    </listitem>

    <listitem>
      <para><code>EndSetVolume(IAsync&amp; aAsync)</code></para>
    </listitem>
  </itemizedlist>

  <note>
    <para>Both <code>Sync&lt;action_name&gt;</code> and
    <code>End&lt;action_name&gt;</code> functions throw a
    <code>ProxyError</code> if the action invocation fails in the C++ and C#
    APIs. C APIs return an error code.</para>
  </note>

  <para>This pattern of naming for actions is consistent across each language
  the Proxies are generated in.</para>

  <para>Refer to the published API or the service XML for specific details
  about each service's functions.</para>
</section>
