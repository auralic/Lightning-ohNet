<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Eventing specific properties</title>

  <para>Each property in the service XML is given a callback function in the
  Proxy. The callback allows the Control Point application to be notified when
  a property has changed. You can use the callbacks in your own code to have
  your Control Point application react whatever way you want.</para>

  <para>Callbacks follow a naming convention, using the name of the property
  as it appears in the service XML, as follows:</para>

  <para><code>SetProperty&lt;property_name&gt;Changed(Functor&amp;
  aPropertyChangedCallback)</code></para>

  <para>For example, a property called Volume in the service XML generates the
  following callback:</para>

  <para><code>SetPropertyVolumeChanged(Functor&amp; aFunctor)</code></para>

  <para>Typically, after a callback is run, you will want your Control Point
  application to query the property for its new value. Each Property also has
  a function to allow your application to do this. You can call this function
  after the callback has run to return the property's new value.</para>

  <para>The functions generated for querying a property's value also have
  their own naming convention as follows:</para>

  <para><code>Property&lt;property_name&gt;(<replaceable>&lt;argument_list&gt;</replaceable>)</code></para>

  <para>For example, the Volume property generates the following subscription
  function:</para>

  <para><code>PropertyVolume(uint32_t&amp; aVolume)</code></para>

  <para>This pattern of naming for properties is consistent across each
  language the Proxies are generated in.</para>

  <para>Refer to the published API or the service XML for specific details
  about each service's properties.</para>

  <para>You must register a callback for each of the properties you are
  interested in. For example:</para>

  <programlisting>void MyClass::SetupCallbacks(CpProxyOpenhomeOrgExample1&amp; aProxy)
{ 
    Functor volumeChanged = MakeFunctor(*this, &amp;MyClass::VolumeChanged);
    aProxy.SetPropertyVolumeChanged(volumeChanged); 
    ... 
} 

void MyClass::VolumeChanged() 
{ 
    // called whenever the 'Volume' property's value changes
}</programlisting>

  <note>
    <para>When callbacks are run the values of related properties will always
    be in sync. This means that for a service where two or more properties are
    always updated together, Control Point applications will never find them
    in inconsistent states.</para>
  </note>

  <para>After your application has been notified of a change in state by the
  callback, use the relevant function to return the new value. For
  example:</para>

  <programlisting>void MyClass::VolumeChanged() 
{ 
    uint32_t volume; PropertyVolume(volume); 
    // update your UI as appropriate
} </programlisting>

  <para>When you have registered your callbacks you must register your
  application's interest in continuing to receive updates to a Proxy's
  properties. You do this by subscribing to the Proxy.</para>
</section>
