!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ATTEMPT_THREAD_NICENESS	Os.c	4;"	d	file:
ATTEMPT_THREAD_PRIORITIES	Os.c	3;"	d	file:
CreateHandle	Os.c	/^static OsNetworkHandle* CreateHandle(OsContext* aContext, int32_t aSocket)$/;"	f	file:
CreateHandle1	Os.c	/^static OsNetworkHandle* CreateHandle1(OsContext* aContext, int32_t aSocket,int32_t bSocket)$/;"	f	file:
DestroyInterfaceChangedObserver	Os.c	/^static void DestroyInterfaceChangedObserver(OsContext* aContext)$/;"	f	file:
DestroyInterfaceChangedObserver_Linux	Os.c	/^static void DestroyInterfaceChangedObserver_Linux(OsContext* aContext)$/;"	f	file:
DestroyInterfaceChangedObserver_MacDesktop	Os.c	/^static void DestroyInterfaceChangedObserver_MacDesktop(OsContext* aContext)$/;"	f	file:
DoThreadCreate	Os.c	/^static THandle DoThreadCreate(OsContext* aContext, const char* aName, uint32_t aPriority, uint32_t aStackBytes, int isJoinable, ThreadEntryPoint aEntryPoint, void* aArg)$/;"	f	file:
GetChar	TerminalOs.cpp	/^TChar TerminalOs::GetChar()$/;"	f	class:OpenHome::TerminalOs
InterfaceChangedDynamicStoreCallback	Os.c	/^static void InterfaceChangedDynamicStoreCallback(SCDynamicStoreRef aStore, CFArrayRef aChangedKeys, void* aInfo)$/;"	f	file:
InterfaceChangedObserver	Os.c	/^typedef struct InterfaceChangedObserver$/;"	s	file:
InterfaceChangedObserver	Os.c	/^} InterfaceChangedObserver;$/;"	t	typeref:struct:InterfaceChangedObserver	file:
Log	Main.cpp	/^void Logger::Log(const char* aMsg)$/;"	f	class:Logger
Logger	Main.cpp	/^class Logger$/;"	c	file:
MAX_FILE_DESCRIPTOR	Os.c	66;"	d	file:
MAX_FILE_DESCRIPTOR	Os.c	69;"	d	file:
MSG_NOSIGNAL	Os.c	67;"	d	file:
MakeIpAddress	Os.c	1206;"	d	file:
Open	File.cpp	/^IFile* IFile::Open(const TChar* aFilename, FileMode aFileMode)$/;"	f	class:OpenHome::IFile
OpenHome	File.cpp	/^namespace OpenHome {$/;"	n	file:
OpenHome	TerminalOs.cpp	/^namespace OpenHome {$/;"	n	file:
OsConsoleWrite	Os.c	/^void OsConsoleWrite(const char* aStr)$/;"	f
OsContext	Os.c	/^struct OsContext {$/;"	s	file:
OsCreate	Os.c	/^OsContext* OsCreate()$/;"	f
OsDestroy	Os.c	/^void OsDestroy(OsContext* aContext)$/;"	f
OsGetPlatformNameAndVersion	Os.c	/^void OsGetPlatformNameAndVersion(OsContext* aContext, char** aName, uint32_t* aMajor, uint32_t* aMinor)$/;"	f
OsMutexCreate	Os.c	/^THandle OsMutexCreate(OsContext* aContext, const char* aName)$/;"	f
OsMutexDestroy	Os.c	/^void OsMutexDestroy(THandle aMutex)$/;"	f
OsMutexLock	Os.c	/^int32_t OsMutexLock(THandle aMutex)$/;"	f
OsMutexUnlock	Os.c	/^int32_t OsMutexUnlock(THandle aMutex)$/;"	f
OsNetworkAccept	Os.c	/^THandle OsNetworkAccept(THandle aHandle, TIpAddress* aClientAddress, uint32_t* aClientPort)$/;"	f
OsNetworkBind	Os.c	/^int32_t OsNetworkBind(THandle aHandle, TIpAddress aAddress, uint32_t aPort)$/;"	f
OsNetworkBind1	Os.c	/^int32_t OsNetworkBind1(THandle aHandle, TIpAddress aAddress, uint32_t aPort)$/;"	f
OsNetworkBindMulticast	Os.c	/^int32_t OsNetworkBindMulticast(THandle aHandle, TIpAddress aAdapter, TIpAddress aMulticast, uint32_t aPort)$/;"	f
OsNetworkClose	Os.c	/^int32_t OsNetworkClose(THandle aHandle)$/;"	f
OsNetworkConnect	Os.c	/^int32_t OsNetworkConnect(THandle aHandle, TIpAddress aAddress, uint16_t aPort, uint32_t aTimeoutMs)$/;"	f
OsNetworkCreate	Os.c	/^THandle OsNetworkCreate(OsContext* aContext, OsNetworkSocketType aSocketType)$/;"	f
OsNetworkFreeInterfaces	Os.c	/^void OsNetworkFreeInterfaces(OsNetworkAdapter* aAdapters)$/;"	f
OsNetworkGetHostByName	Os.c	/^int32_t OsNetworkGetHostByName(const char* aAddress, TIpAddress* aHost)$/;"	f
OsNetworkHandle	Os.c	/^typedef struct OsNetworkHandle$/;"	s	file:
OsNetworkHandle	Os.c	/^}OsNetworkHandle;$/;"	t	typeref:struct:OsNetworkHandle	file:
OsNetworkInterrupt	Os.c	/^int32_t OsNetworkInterrupt(THandle aHandle, int32_t aInterrupt)$/;"	f
OsNetworkListAdapters	Os.c	/^int32_t OsNetworkListAdapters(OsContext* aContext, OsNetworkAdapter** aAdapters, uint32_t aUseLoopback)$/;"	f
OsNetworkListen	Os.c	/^int32_t OsNetworkListen(THandle aHandle, uint32_t aSlots)$/;"	f
OsNetworkPort	Os.c	/^int32_t OsNetworkPort(THandle aHandle, uint32_t* aPort)$/;"	f
OsNetworkReceive	Os.c	/^int32_t OsNetworkReceive(THandle aHandle, uint8_t* aBuffer, uint32_t aBytes)$/;"	f
OsNetworkReceiveFrom	Os.c	/^int32_t OsNetworkReceiveFrom(THandle aHandle, uint8_t* aBuffer, uint32_t aBytes, TIpAddress* aAddress, uint16_t* aPort)$/;"	f
OsNetworkSend	Os.c	/^int32_t OsNetworkSend(THandle aHandle, const uint8_t* aBuffer, uint32_t aBytes)$/;"	f
OsNetworkSendTo	Os.c	/^int32_t OsNetworkSendTo(THandle aHandle, const uint8_t* aBuffer, uint32_t aBytes, TIpAddress aAddress, uint16_t aPort)$/;"	f
OsNetworkSetInterfaceChangedObserver	Os.c	/^void OsNetworkSetInterfaceChangedObserver(OsContext* aContext, InterfaceListChanged aCallback, void* aArg)$/;"	f
OsNetworkSocketMulticastAddMembership	Os.c	/^int32_t OsNetworkSocketMulticastAddMembership(THandle aHandle, TIpAddress aInterface, TIpAddress aAddress)$/;"	f
OsNetworkSocketMulticastDropMembership	Os.c	/^int32_t OsNetworkSocketMulticastDropMembership(THandle aHandle, TIpAddress aInterface, TIpAddress aAddress)$/;"	f
OsNetworkSocketSetMulticastIf	Os.c	/^int32_t OsNetworkSocketSetMulticastIf(THandle aHandle,  TIpAddress aInterface)$/;"	f
OsNetworkSocketSetMulticastTtl	Os.c	/^int32_t OsNetworkSocketSetMulticastTtl(THandle aHandle, uint8_t aTtl)$/;"	f
OsNetworkSocketSetReceiveTimeout	Os.c	/^int32_t OsNetworkSocketSetReceiveTimeout(THandle aHandle, uint32_t aMilliSeconds)$/;"	f
OsNetworkSocketSetRecvBufBytes	Os.c	/^int32_t OsNetworkSocketSetRecvBufBytes(THandle aHandle, uint32_t aBytes)$/;"	f
OsNetworkSocketSetReuseAddress	Os.c	/^int32_t OsNetworkSocketSetReuseAddress(THandle aHandle)$/;"	f
OsNetworkSocketSetSendBufBytes	Os.c	/^int32_t OsNetworkSocketSetSendBufBytes(THandle aHandle, uint32_t aBytes)$/;"	f
OsNetworkTcpSetNoDelay	Os.c	/^int32_t OsNetworkTcpSetNoDelay(THandle aHandle)$/;"	f
OsQuit	Os.c	/^void OsQuit(OsContext* aContext)$/;"	f
OsSemaphoreClear	Os.c	/^uint32_t OsSemaphoreClear(THandle aSem)$/;"	f
OsSemaphoreCreate	Os.c	/^THandle OsSemaphoreCreate(OsContext* aContext, const char* aName, uint32_t aCount)$/;"	f
OsSemaphoreDestroy	Os.c	/^void OsSemaphoreDestroy(THandle aSem)$/;"	f
OsSemaphoreSignal	Os.c	/^int32_t OsSemaphoreSignal(THandle aSem)$/;"	f
OsSemaphoreTimedWait	Os.c	/^int32_t OsSemaphoreTimedWait(THandle aSem, uint32_t aTimeoutMs)$/;"	f
OsSemaphoreWait	Os.c	/^int32_t OsSemaphoreWait(THandle aSem)$/;"	f
OsStackTrace	Os.c	/^typedef struct OsStackTrace$/;"	s	file:
OsStackTrace	Os.c	/^} OsStackTrace;$/;"	t	typeref:struct:OsStackTrace	file:
OsStackTraceCopy	Os.c	/^THandle OsStackTraceCopy(THandle aStackTrace)$/;"	f
OsStackTraceEntry	Os.c	/^const char* OsStackTraceEntry(THandle aStackTrace, uint32_t aIndex)$/;"	f
OsStackTraceFinalise	Os.c	/^void OsStackTraceFinalise(THandle aStackTrace)$/;"	f
OsStackTraceInitialise	Os.c	/^THandle OsStackTraceInitialise(OsContext* aContext)$/;"	f
OsStackTraceNumEntries	Os.c	/^uint32_t OsStackTraceNumEntries(THandle aStackTrace)$/;"	f
OsThreadCreate	Os.c	/^THandle OsThreadCreate(OsContext* aContext, const char* aName, uint32_t aPriority, uint32_t aStackBytes, ThreadEntryPoint aEntryPoint, void* aArg)$/;"	f
OsThreadDestroy	Os.c	/^void OsThreadDestroy(THandle aThread)$/;"	f
OsThreadInstallSignalHandlers	SignalHandlers.cpp	/^extern "C" void OsThreadInstallSignalHandlers()$/;"	f
OsThreadSupportsPriorities	Os.c	/^int32_t OsThreadSupportsPriorities(OsContext* aContext)$/;"	f
OsThreadTls	Os.c	/^void* OsThreadTls(OsContext* aContext)$/;"	f
OsTimeInUs	Os.c	/^uint64_t OsTimeInUs(OsContext* aContext)$/;"	f
Print	TerminalOs.cpp	/^void TerminalOs::Print(const Brx& aBuffer)$/;"	f	class:OpenHome::TerminalOs
STACK_TRACE_ENABLE	Os.c	121;"	d	file:
STACK_TRACE_ENABLE	Os.c	123;"	d	file:
STACK_TRACE_MAX_DEPTH	Os.c	127;"	d	file:
SemaphoreData	Os.c	/^} SemaphoreData;$/;"	t	typeref:struct:__anon1	file:
SetFdBlocking	Os.c	/^static void SetFdBlocking(int32_t aSocket)$/;"	f	file:
SetFdNonBlocking	Os.c	/^static void SetFdNonBlocking(int32_t aSocket)$/;"	f	file:
SetInterfaceChangedObserver_Linux	Os.c	/^static void SetInterfaceChangedObserver_Linux(OsContext* aContext, InterfaceListChanged aCallback, void* aArg)$/;"	f	file:
SetInterfaceChangedObserver_MacDesktop	Os.c	/^static void SetInterfaceChangedObserver_MacDesktop(OsContext* aContext, InterfaceListChanged aCallback, void* aArg)$/;"	f	file:
SocketInterrupted	Os.c	/^static int32_t SocketInterrupted(const OsNetworkHandle* aHandle)$/;"	f	file:
TEMP_FAILURE_RETRY	Os.c	59;"	d	file:
TEMP_FAILURE_RETRY_2	Os.c	49;"	d	file:
TerminalOs	TerminalOs.cpp	/^TerminalOs::TerminalOs()$/;"	f	class:OpenHome::TerminalOs
ThreadData	Os.c	/^} ThreadData;$/;"	t	typeref:struct:__anon2	file:
ThreadJoin	Os.c	/^static int32_t ThreadJoin(THandle aThread)$/;"	f	file:
adapterChangeObserverThread	Os.c	/^void adapterChangeObserverThread(void* aPtr)$/;"	f
addTimeval	Os.c	/^static struct timeval addTimeval(struct timeval* aT1, struct timeval* aT2)$/;"	f	file:
bSocket	Os.c	/^    int32_t    bSocket;$/;"	m	struct:OsNetworkHandle	file:
getAbsTimespec	Os.c	/^static void getAbsTimespec(struct timespec* aTime, uint32_t aMsecs)$/;"	f	file:
iArg	Os.c	/^    void*            iArg;$/;"	m	struct:__anon2	file:
iArg	Os.c	/^    void* iArg;$/;"	m	struct:InterfaceChangedObserver	file:
iCallback	Os.c	/^    InterfaceListChanged iCallback;$/;"	m	struct:InterfaceChangedObserver	file:
iCond	Os.c	/^    pthread_cond_t  iCond;$/;"	m	struct:__anon1	file:
iCount	Os.c	/^    int iCount;$/;"	m	struct:OsStackTrace	file:
iCtx	Os.c	/^    OsContext*       iCtx;$/;"	m	struct:__anon2	file:
iCtx	Os.c	/^    OsContext* iCtx;$/;"	m	struct:OsNetworkHandle	file:
iEntryPoint	Os.c	/^    ThreadEntryPoint iEntryPoint;$/;"	m	struct:__anon2	file:
iInterfaceChangedObserver	Os.c	/^    struct InterfaceChangedObserver* iInterfaceChangedObserver;$/;"	m	struct:OsContext	typeref:struct:OsContext::InterfaceChangedObserver	file:
iInterrupted	Os.c	/^    int32_t    iInterrupted;$/;"	m	struct:OsNetworkHandle	file:
iLock	Os.c	/^    pthread_mutex_t iLock;$/;"	m	struct:__anon1	file:
iMutex	Os.c	/^    THandle iMutex;$/;"	m	struct:OsContext	file:
iPipe	Os.c	/^    int32_t    iPipe[2];$/;"	m	struct:OsNetworkHandle	file:
iPrevTime	Os.c	/^    struct timeval iPrevTime; \/* Last time OsTimeInUs() was called *\/$/;"	m	struct:OsContext	typeref:struct:OsContext::timeval	file:
iPriority	Os.c	/^    uint32_t         iPriority;$/;"	m	struct:__anon2	file:
iRunLoopSource	Os.c	/^    CFRunLoopSourceRef iRunLoopSource;$/;"	m	struct:InterfaceChangedObserver	file:
iSocket	Os.c	/^    int32_t    iSocket;$/;"	m	struct:OsNetworkHandle	file:
iStack	Os.c	/^    void* iStack[STACK_TRACE_MAX_DEPTH];$/;"	m	struct:OsStackTrace	file:
iStartTime	Os.c	/^    struct timeval iStartTime; \/* Time OsCreate was called *\/$/;"	m	struct:OsContext	typeref:struct:OsContext::timeval	file:
iStore	Os.c	/^    SCDynamicStoreRef iStore;$/;"	m	struct:InterfaceChangedObserver	file:
iSymbols	Os.c	/^    char** iSymbols;$/;"	m	struct:OsStackTrace	file:
iThread	Os.c	/^    THandle iThread;$/;"	m	struct:InterfaceChangedObserver	file:
iThread	Os.c	/^    pthread_t        iThread;$/;"	m	struct:__anon2	file:
iThreadArgKey	Os.c	/^    pthread_key_t iThreadArgKey;$/;"	m	struct:OsContext	file:
iTimeAdjustment	Os.c	/^    struct timeval iTimeAdjustment; \/* Amount to adjust return for OsTimeInUs() by. $/;"	m	struct:OsContext	typeref:struct:OsContext::timeval	file:
iValue	Os.c	/^    int32_t         iValue;$/;"	m	struct:__anon1	file:
kMinStackBytes	Os.c	46;"	d	file:
kThreadSchedPolicy	Os.c	47;"	d	file:
logger	MainC.c	/^void logger(void* aPtr, const char* aMsg)$/;"	f
main	Main.cpp	/^int main(int argc, char* argv[])$/;"	f
main	MainC.c	/^int main(int argc, char* argv[])$/;"	f
netHnd	Os.c	/^    OsNetworkHandle *netHnd;$/;"	m	struct:InterfaceChangedObserver	file:
nfds	Os.c	/^static int nfds(const OsNetworkHandle* aHandle)$/;"	f	file:
sockaddrFromEndpoint	Os.c	/^static void sockaddrFromEndpoint(struct sockaddr_in* aAddr, TIpAddress aAddress, uint16_t aPort)$/;"	f	file:
subtractTimeval	Os.c	/^static struct timeval subtractTimeval(struct timeval* aT1, struct timeval* aT2)$/;"	f	file:
threadEntrypoint	Os.c	/^static void* threadEntrypoint(void* aArg)$/;"	f	file:
~TerminalOs	TerminalOs.cpp	/^TerminalOs::~TerminalOs()$/;"	f	class:OpenHome::TerminalOs
