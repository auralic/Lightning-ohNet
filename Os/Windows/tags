!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CreateHandle	Os.c	/^static OsNetworkHandle* CreateHandle(OsContext* aContext, SOCKET aSocket)$/;"	f	file:
GetChar	TerminalOs.cpp	/^TChar TerminalOs::GetChar()$/;"	f	class:OpenHome::TerminalOs
InterfaceChangeObserver	Os.c	/^typedef struct InterfaceChangeObserver$/;"	s	file:
InterfaceChangeObserver	Os.c	/^} InterfaceChangeObserver;$/;"	t	typeref:struct:InterfaceChangeObserver	file:
Log	Main.cpp	/^void Logger::Log(const char* aMsg)$/;"	f	class:Logger
Logger	Main.cpp	/^class Logger$/;"	c	file:
MakeIpAddress	Os.c	936;"	d	file:
Mutex	Os.c	/^} Mutex;$/;"	t	typeref:struct:__anon1	file:
Open	File.cpp	/^IFile* IFile::Open(const TChar* aFilename, FileMode aFileMode)$/;"	f	class:OpenHome::IFile
OpenHome	File.cpp	/^namespace OpenHome {$/;"	n	file:
OpenHome	TerminalOs.cpp	/^namespace OpenHome {$/;"	n	file:
OsConsoleWrite	Os.c	/^void OsConsoleWrite(const char* aStr)$/;"	f
OsContext	Os.c	/^typedef struct OsContext {$/;"	s	file:
OsContext	Os.c	/^} OsContext;$/;"	t	typeref:struct:OsContext	file:
OsCreate	Os.c	/^OsContext* OsCreate()$/;"	f
OsDestroy	Os.c	/^void OsDestroy(OsContext* aContext)$/;"	f
OsGetPlatformNameAndVersion	Os.c	/^void OsGetPlatformNameAndVersion(OsContext* aContext, char** aName, uint32_t* aMajor, uint32_t* aMinor)$/;"	f
OsMutexCreate	Os.c	/^THandle OsMutexCreate(OsContext* aContext, const char* aName)$/;"	f
OsMutexDestroy	Os.c	/^void OsMutexDestroy(THandle aMutex)$/;"	f
OsMutexLock	Os.c	/^int32_t OsMutexLock(THandle aMutex)$/;"	f
OsMutexUnlock	Os.c	/^int32_t OsMutexUnlock(THandle aMutex)$/;"	f
OsNetworkAccept	Os.c	/^THandle OsNetworkAccept(THandle aHandle, TIpAddress* aClientAddress, uint32_t* aClientPort)$/;"	f
OsNetworkBind	Os.c	/^int32_t OsNetworkBind(THandle aHandle, TIpAddress aAddress, uint32_t aPort)$/;"	f
OsNetworkBindMulticast	Os.c	/^int32_t OsNetworkBindMulticast(THandle aHandle, TIpAddress aAdapter, TIpAddress aMulticast, uint32_t aPort)$/;"	f
OsNetworkClose	Os.c	/^int32_t OsNetworkClose(THandle aHandle)$/;"	f
OsNetworkConnect	Os.c	/^int32_t OsNetworkConnect(THandle aHandle, TIpAddress aAddress, uint16_t aPort, uint32_t aTimeoutMs)$/;"	f
OsNetworkCreate	Os.c	/^THandle OsNetworkCreate(OsContext* aContext, OsNetworkSocketType aSocketType)$/;"	f
OsNetworkFreeInterfaces	Os.c	/^void OsNetworkFreeInterfaces(OsNetworkAdapter* aInterfaces)$/;"	f
OsNetworkGetHostByName	Os.c	/^int32_t OsNetworkGetHostByName(const char* aAddress, TIpAddress* aHost)$/;"	f
OsNetworkHandle	Os.c	/^typedef struct OsNetworkHandle$/;"	s	file:
OsNetworkHandle	Os.c	/^}OsNetworkHandle;$/;"	t	typeref:struct:OsNetworkHandle	file:
OsNetworkInterrupt	Os.c	/^int32_t OsNetworkInterrupt(THandle aHandle, int32_t aInterrupt)$/;"	f
OsNetworkListAdapters	Os.c	/^int32_t OsNetworkListAdapters(OsContext* aContext, OsNetworkAdapter** aInterfaces, uint32_t aUseLoopback)$/;"	f
OsNetworkListen	Os.c	/^int32_t OsNetworkListen(THandle aHandle, uint32_t aSlots)$/;"	f
OsNetworkPort	Os.c	/^int32_t OsNetworkPort(THandle aHandle, uint32_t* aPort)$/;"	f
OsNetworkReceive	Os.c	/^int32_t OsNetworkReceive(THandle aHandle, uint8_t* aBuffer, uint32_t aBytes)$/;"	f
OsNetworkReceiveFrom	Os.c	/^int32_t OsNetworkReceiveFrom(THandle aHandle, uint8_t* aBuffer, uint32_t aBytes, TIpAddress* aAddress, uint16_t* aPort)$/;"	f
OsNetworkSend	Os.c	/^int32_t OsNetworkSend(THandle aHandle, const uint8_t* aBuffer, uint32_t aBytes)$/;"	f
OsNetworkSendTo	Os.c	/^int32_t OsNetworkSendTo(THandle aHandle, const uint8_t* aBuffer, uint32_t aBytes, TIpAddress aAddress, uint16_t aPort)$/;"	f
OsNetworkSetInterfaceChangedObserver	Os.c	/^void OsNetworkSetInterfaceChangedObserver(OsContext* aContext, InterfaceListChanged aCallback, void* aArg)$/;"	f
OsNetworkSetTestInterfaceIndex	Os.c	/^void OsNetworkSetTestInterfaceIndex(OsContext* aContext, int32_t aIndex)$/;"	f
OsNetworkSocketMulticastAddMembership	Os.c	/^int32_t OsNetworkSocketMulticastAddMembership(THandle aHandle, TIpAddress aInterface, TIpAddress aAddress)$/;"	f
OsNetworkSocketMulticastDropMembership	Os.c	/^int32_t OsNetworkSocketMulticastDropMembership(THandle aHandle, TIpAddress aInterface, TIpAddress aAddress)$/;"	f
OsNetworkSocketSetMulticastIf	Os.c	/^int32_t OsNetworkSocketSetMulticastIf(THandle aHandle,  TIpAddress aInterface)$/;"	f
OsNetworkSocketSetMulticastTtl	Os.c	/^int32_t OsNetworkSocketSetMulticastTtl(THandle aHandle, uint8_t aTtl)$/;"	f
OsNetworkSocketSetReceiveTimeout	Os.c	/^int32_t OsNetworkSocketSetReceiveTimeout(THandle aHandle, uint32_t aMilliSeconds)$/;"	f
OsNetworkSocketSetRecvBufBytes	Os.c	/^int32_t OsNetworkSocketSetRecvBufBytes(THandle aHandle, uint32_t aBytes)$/;"	f
OsNetworkSocketSetReuseAddress	Os.c	/^int32_t OsNetworkSocketSetReuseAddress(THandle aHandle)$/;"	f
OsNetworkSocketSetSendBufBytes	Os.c	/^int32_t OsNetworkSocketSetSendBufBytes(THandle aHandle, uint32_t aBytes)$/;"	f
OsNetworkTcpSetNoDelay	Os.c	/^int32_t OsNetworkTcpSetNoDelay(THandle aHandle)$/;"	f
OsQuit	Os.c	/^void OsQuit(OsContext* aContext)$/;"	f
OsSemaphoreClear	Os.c	/^uint32_t OsSemaphoreClear(THandle aSem)$/;"	f
OsSemaphoreCreate	Os.c	/^THandle OsSemaphoreCreate(OsContext* aContext, const char* aName, uint32_t aCount)$/;"	f
OsSemaphoreDestroy	Os.c	/^void OsSemaphoreDestroy(THandle aSem)$/;"	f
OsSemaphoreSignal	Os.c	/^int32_t OsSemaphoreSignal(THandle aSem)$/;"	f
OsSemaphoreTimedWait	Os.c	/^int32_t OsSemaphoreTimedWait(THandle aSem, uint32_t aTimeoutMs)$/;"	f
OsSemaphoreWait	Os.c	/^int32_t OsSemaphoreWait(THandle aSem)$/;"	f
OsStackTrace	Os.c	/^typedef struct OsStackTrace$/;"	s	file:
OsStackTrace	Os.c	/^} OsStackTrace;$/;"	t	typeref:struct:OsStackTrace	file:
OsStackTraceCopy	Os.c	/^THandle OsStackTraceCopy(THandle aStackTrace)$/;"	f
OsStackTraceEntry	Os.c	/^const char* OsStackTraceEntry(THandle aStackTrace, uint32_t aIndex)$/;"	f
OsStackTraceFinalise	Os.c	/^void OsStackTraceFinalise(THandle aStackTrace)$/;"	f
OsStackTraceInitialise	Os.c	/^THandle OsStackTraceInitialise(OsContext* aContext)$/;"	f
OsStackTraceNumEntries	Os.c	/^uint32_t OsStackTraceNumEntries(THandle aStackTrace)$/;"	f
OsThreadCreate	Os.c	/^THandle OsThreadCreate(OsContext* aContext, const char* aName, uint32_t aPriority,$/;"	f
OsThreadDestroy	Os.c	/^void OsThreadDestroy(THandle aThread)$/;"	f
OsThreadInstallSignalHandlers	SignalHandlers.cpp	/^extern "C" void OsThreadInstallSignalHandlers()$/;"	f
OsThreadSupportsPriorities	Os.c	/^int32_t OsThreadSupportsPriorities(OsContext* aContext)$/;"	f
OsThreadTls	Os.c	/^void* OsThreadTls(OsContext* aContext)$/;"	f
OsTimeInUs	Os.c	/^uint64_t OsTimeInUs(OsContext* aContext)$/;"	f
Print	TerminalOs.cpp	/^void TerminalOs::Print(const Brx& aBuffer)$/;"	f	class:OpenHome::TerminalOs
SEHTranslator	SignalHandlers.cpp	/^static void SEHTranslator(unsigned int u, EXCEPTION_POINTERS* \/*pExp*\/)$/;"	f	file:
STACK_TRACE_ENABLE	Os.c	137;"	d	file:
STACK_TRACE_MAX_DEPTH	Os.c	128;"	d	file:
SetCurrentThreadName	Os.c	/^static void SetCurrentThreadName(const char* threadName)$/;"	f	file:
SetSocketBlocking	Os.c	/^static void SetSocketBlocking(SOCKET aSocket)$/;"	f	file:
SocketInterrupted	Os.c	/^static int32_t SocketInterrupted(const OsNetworkHandle* aHandle)$/;"	f	file:
THREADNAME_INFO	Os.c	/^} THREADNAME_INFO;$/;"	t	typeref:struct:tagTHREADNAME_INFO	file:
TerminalOs	TerminalOs.cpp	/^TerminalOs::TerminalOs()$/;"	f	class:OpenHome::TerminalOs
ThreadData	Os.c	/^} ThreadData;$/;"	t	typeref:struct:__anon2	file:
UNUSED	Os.c	19;"	d	file:
dwFlags	Os.c	/^   DWORD dwFlags;    \/\/ Reserved for future use, must be zero.$/;"	m	struct:tagTHREADNAME_INFO	file:
dwThreadID	Os.c	/^   DWORD dwThreadID; \/\/ Thread ID (-1=caller thread).$/;"	m	struct:tagTHREADNAME_INFO	file:
dwType	Os.c	/^   DWORD dwType;     \/\/ Must be 0x1000.$/;"	m	struct:tagTHREADNAME_INFO	file:
iArg	Os.c	/^    void*                iArg;$/;"	m	struct:InterfaceChangeObserver	file:
iArg	Os.c	/^    void*            iArg;$/;"	m	struct:__anon2	file:
iCallback	Os.c	/^    InterfaceListChanged iCallback;$/;"	m	struct:InterfaceChangeObserver	file:
iCount	Os.c	/^    USHORT iCount;$/;"	m	struct:OsStackTrace	file:
iCount	Os.c	/^    uint32_t         iCount;$/;"	m	struct:__anon1	file:
iCs	Os.c	/^    CRITICAL_SECTION iCs;$/;"	m	struct:__anon1	file:
iCtx	Os.c	/^    OsContext*       iCtx;$/;"	m	struct:__anon2	file:
iCtx	Os.c	/^    OsContext* iCtx;$/;"	m	struct:OsNetworkHandle	file:
iDebugSymbolHandle	Os.c	/^    HANDLE iDebugSymbolHandle;$/;"	m	struct:OsContext	file:
iEntryPoint	Os.c	/^    ThreadEntryPoint iEntryPoint;$/;"	m	struct:__anon2	file:
iEvent	Os.c	/^    WSAEVENT             iEvent;$/;"	m	struct:InterfaceChangeObserver	file:
iEvent	Os.c	/^    WSAEVENT   iEvent;$/;"	m	struct:OsNetworkHandle	file:
iInterfaceChangeObserver	Os.c	/^    InterfaceChangeObserver* iInterfaceChangeObserver;$/;"	m	struct:OsContext	file:
iInterrupted	Os.c	/^    int32_t    iInterrupted;$/;"	m	struct:OsNetworkHandle	file:
iMutex	Os.c	/^    THandle iMutex;$/;"	m	struct:OsContext	file:
iName	Os.c	/^    char*            iName;$/;"	m	struct:__anon2	file:
iOsContext	Os.c	/^    OsContext* iOsContext;$/;"	m	struct:OsStackTrace	file:
iPrevTime	Os.c	/^    uint64_t iPrevTime; \/* Last time OsTimeInUs() was called *\/$/;"	m	struct:OsContext	file:
iPriority	Os.c	/^    uint32_t         iPriority;$/;"	m	struct:__anon2	file:
iSem	Os.c	/^    HANDLE               iSem;$/;"	m	struct:InterfaceChangeObserver	file:
iShutdown	Os.c	/^    int                  iShutdown;$/;"	m	struct:InterfaceChangeObserver	file:
iShutdownEvent	Os.c	/^    WSAEVENT             iShutdownEvent;$/;"	m	struct:InterfaceChangeObserver	file:
iSocket	Os.c	/^    SOCKET               iSocket;$/;"	m	struct:InterfaceChangeObserver	file:
iSocket	Os.c	/^    SOCKET     iSocket;$/;"	m	struct:OsNetworkHandle	file:
iStack	Os.c	/^    void* iStack[STACK_TRACE_MAX_DEPTH];$/;"	m	struct:OsStackTrace	file:
iStartTime	Os.c	/^    uint64_t iStartTime; \/* Time OsCreate was called *\/$/;"	m	struct:OsContext	file:
iSymbol	Os.c	/^    SYMBOL_INFO* iSymbol;$/;"	m	struct:OsStackTrace	file:
iTestInterfaceIndex	Os.c	/^    int32_t iTestInterfaceIndex;$/;"	m	struct:OsContext	file:
iThread	Os.c	/^    HANDLE           iThread;$/;"	m	struct:__anon2	file:
iTimeAdjustment	Os.c	/^    uint64_t iTimeAdjustment; \/* Amount to adjust return for OsTimeInUs() by. $/;"	m	struct:OsContext	file:
iTlsIndex	Os.c	/^    DWORD iTlsIndex;$/;"	m	struct:OsContext	file:
interfaceChangeThread	Os.c	/^DWORD interfaceChangeThread(LPVOID aArg)$/;"	f
kMinStackBytes	Os.c	/^static const uint32_t kMinStackBytes = 1024 * 16;$/;"	v	file:
kPriorityMax	Os.c	/^static const uint32_t kPriorityMax = 150;$/;"	v	file:
kPriorityMin	Os.c	/^static const uint32_t kPriorityMin = 50;$/;"	v	file:
kStackPaddingBytes	Os.c	/^static const uint32_t kStackPaddingBytes = 1024 * 16;$/;"	v	file:
logger	MainC.c	/^void STDCALL logger(void* aPtr, const char* aMsg)$/;"	f
main	Main.cpp	/^int __cdecl main(int argc, char* argv[])$/;"	f
main	MainC.c	/^int __cdecl main(int argc, char* argv[])$/;"	f
sockaddrFromEndpoint	Os.c	/^static void sockaddrFromEndpoint(struct sockaddr_in* aAddr, TIpAddress aAddress, uint16_t aPort)$/;"	f	file:
szName	Os.c	/^   LPCSTR szName;    \/\/ Pointer to name (in user addr space).$/;"	m	struct:tagTHREADNAME_INFO	file:
tagTHREADNAME_INFO	Os.c	/^typedef struct tagTHREADNAME_INFO$/;"	s	file:
threadEntrypoint	Os.c	/^DWORD threadEntrypoint(LPVOID aArg)$/;"	f
~TerminalOs	TerminalOs.cpp	/^TerminalOs::~TerminalOs()$/;"	f	class:OpenHome::TerminalOs
